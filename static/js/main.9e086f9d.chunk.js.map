{"version":3,"sources":["components/theme.js","Constants.js","components/PTSSignifier.js","components/styles.js","components/Checkboxes.js","components/PTSHelp.js","components/Legend.js","components/StyledTableCell.js","components/PTSFailures.js","components/PTSMirrors.js","components/PTSPackages.js","processData.js","components/PTSProfile.js","components/PTSResults.js","components/FilterForm.js","App.js","index.js"],"names":["theme","createMuiTheme","typography","h2","fontSize","marginBottom","h4","palette","primary","main","secondary","error","light","dark","fatal","warning","pass","grey","100","background","textfield","spacing","overrides","MuiTooltip","tooltip","color","ALL","name","idx","checked","disabled","competes","desc","LATEST","FAILED","children","NONE","NOT_TESTED","MD5","SHA","CHECKSUM","DOWNLOAD","TIMED_OUT","NOT_FOUND","REDIRECTS","R301","R302","JSON_FAILED","JSON_PASSED","JSON_NOT_TESTED","getCheckboxColor","index","col","getTestSignifiers","status","map","stat","key","shape","icon","CircleIcon","style","marginLeft","SquareIcon","TriangleIcon","StarIcon","RhombusIcon","getIconShape","getStatusColor","PTSSignifier","props","colorStatus","useStyles","makeStyles","root","flexGrow","progressBar","position","marginTop","button","contrastText","fontWeight","fontWeightBold","border","borderRadius","padding","toolbar","toolbar_sm","toolbar_margins","breakpoints","down","failed_checkbox_margins","filter_margins","margin","paper","textAlign","text","height","borders","borderWidth","borderColor","borderStyle","checkboxTip","common","black","tableHeader","backgroundColor","profileNameRow","resultsRow","profileName","cursor","packageName","fontWeightMedium","borderTopColor","borderTopWidth","borderTopStyle","packageNameRow","mirrorRow","failureRow","heading","secondaryHeading","mirrorHeading","mirrorSecondaryHeading","mirrorDataHeading","width","failureHeading","searchField","checkboxes","helpIcon","checkboxList","filter","Constants","useCheckboxes","defaultCheckboxes","useState","box","hide","setCheckboxes","setCheckbox","currBox","includes","forEach","manageState","newcheckboxes","createRadio","classes","chCol","FormControlLabel","control","Radio","className","onChange","e","target","label","createCheckbox","Checkbox","Checkboxes","Fragment","Grid","item","xs","sm","md","lg","container","direction","PTSHelp","React","anchorEl","setAnchorEl","open","Boolean","id","undefined","IconButton","aria-describedby","onClick","event","currentTarget","Popover","onClose","anchorOrigin","vertical","horizontal","transformOrigin","Box","Typography","variant","display","component","ml","createLegend","colIdx","colName","Legend","Paper","StyledTableCell","withStyles","head","white","body","TableCell","PTSFailures","Object","entries","failed","value","keyFormatted","replace","startCase","match","toUpper","TableRow","rowSpan","length","verticalAlign","getFailures","PTSMirrors","openMirror","setOpenMirror","useTheme","getFormattedCell","toLowerCase","str","slice","lastIndexOf","Link","href","rel","window","innerHTML","preventDefault","handleClick","data","colSpan","url","Collapse","in","timeout","containsFailures","result","failures","push","CollapseMirrorComponent","unmountOnExit","PTSPackages","packages","setOpen","identifier","filename","filesize","sha256","md5","mirror","getMirrors","mir","some","hasFailedStatus","semver","require","mapData","testProfile","dataMap","checksum","redirect","download","timeOut","notTested","profile","checksumError","redirectError","downloadError","timeError","failError","profileColor","packs","packageColor","mirrorColor","toString","Array","from","Set","getColor","test","c","getLatestVersion","profiles","profileDetails","name_match","version_match","version","getProfileNameAndVersion","findIndex","curr","versions","gt","getProfileColor","returnCol","translate","PTSProfile","getPackages","pack","pKey","notTestedPackage","PTSResults","results","tpKey","getResults","FilterForm","lastDownload","searchValue","setSearchValue","legend","setLegend","allData","all","latest","latestData","latestDataMap","filters","checks","checkbox","getSearchData","getData","ThemeProvider","Container","maxWidth","onSubmit","useMediaQuery","up","AppBar","Toolbar","justify","displayLegend","TextField","size","InputLabelProps","shrink","InputProps","startAdornment","InputAdornment","endAdornment","Divider","TableContainer","maxHeight","Table","stickyHeader","TableHead","TableBody","App","setData","loading","setLoading","lastModified","setLastModified","useEffect","a","axios","headers","mappedData","latestVersion","mappedLatestData","LinearProgress","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.9e086f9d.chunk.js","sourcesContent":["import {createMuiTheme} from '@material-ui/core/styles';\n\nexport const theme = createMuiTheme({\n    typography: {\n        h2: {\n            fontSize:36,\n            marginBottom:15,\n        },\n        h4: {\n            fontSize:24,\n        },\n    },\n    palette: {\n        primary: {\n            main: '#285F80', \n        },\n        secondary: {\n            main: '#d32f2f', \n        },\n        error: {\n            light: '#f00000',\n            main: '#cc3300',\n            dark: '\t#a90000'\n        },\n        fatal : {\n            main: '#000000',\n        },\n        warning: {\n            dark: '#fa8c16',\n            main: '#fa8c16',\n        },\n        pass: {\n            main: '#339900',\n        },\n        grey: {\n            100 : \"#fafbfb\",\n        },\n        background: {\n            textfield : \"fafbfb\",\n        },\n\n    },\n    spacing : 2,\n    overrides: {\n        MuiTooltip: {\n            tooltip: {\n            fontSize: \"0.75em\",\n            color: \"white\",\n        }\n        },\n    }\n});\n\nexport default theme;","// Checkbox Index\nexport const ALL_IDX = 0;\nexport const LATEST_IDX = 1;\nexport const FAILED_IDX = 2;\nexport const MD5_IDX = 3;\nexport const SHA_IDX = 4;\nexport const REDIRECTS_IDX = 5;\nexport const NOT_TESTED_IDX = 6;\nexport const TIMED_OUT_IDX = 7;\nexport const CHECKSUM_IDX = 8;\nexport const DOWNLOAD_IDX = 9;\nexport const NOT_FOUND_IDX = 10;\nexport const R301_IDX = 11;\nexport const R302_IDX = 12;\nexport const NONE_IDX = 13;\n\n//Colors\nexport const COLOR_NEUTRAL=0\nexport const COLOR_PASS=1\nexport const COLOR_FAIL=2\nexport const COLOR_MD5=3\nexport const COLOR_SHA=4\nexport const COLOR_TIMEOUT=5\nexport const COLOR_HTTP_0=6\nexport const COLOR_HTTP_404=7\nexport const COLOR_301=8\nexport const COLOR_302=9\nexport const COLOR_404=10\nexport const COLOR_HTTP=11\nexport const COLOR_NOT_TESTED=12\nexport const COLOR_WARNING=13\nexport const COLOR_FATAL=14\nexport const COLOR_CHECKSUM=15\nexport const COLOR_REDIRECT=16\nexport const COLOR_DOWNLOAD=17\nexport const COLOR_NO_CATEGORY=18\n\n/**\n * To enable a checkbox:\n * 1. Declare a constant IDX as above\n * 2. define the Checkbox conditions as per the following:\n    export const <Filter assocated with CHECKBOX> = {\n        <Label for check box, string>: \"Failed\",\n        <index - must be declared as a contant, integer, defined as constant>: FAILED_IDX,\n        <checked - initial state of checkbox, true|false>: false,\n        <disabled - intial state of checkbox button, true|false: false,\n        <children - checkboxes to be displayed when checked = true, array of integers, defined as constant>: [CHECKSUM_IDX, REDIRECTS_IDX, DOWNLOAD_IDX],\n        <competes - checkboxes that cannot be selected at the same time as this checkbox, array of integers, : [ NOT_TESTED_IDX, TIMED_OUT_IDX],\n        <desc - tooltip description if enabled>: \"Displays all test profiles that failed\",\n    } \n \n    Modify other checkboxes\n    - If this is a child, add it to the children array of the parent\n    - If this checkbutton has competition, add it to the compete array of the competition\n\n * 3. Checkboxes.js\n        1. Add the checkbox to the const checkboxList\n        2. Add the checkbox as a GridItem in the function Checkboxes()\n * 4. When the checkbox is selected, it will automatically be added to the filter selection in FilterForm.getData()\n */\n\n\nexport const ALL = {\n    name: \"All Versions\",\n    idx: ALL_IDX,\n    checked: false,\n    disabled: false,\n    competes:[LATEST_IDX],\n    desc: \"Displays all tests profiles\",\n}\n\nexport const LATEST = {\n    name: \"Latest Versions\",\n    idx: LATEST_IDX,\n    checked: true,\n    disabled: false,\n    competes:[ALL_IDX],\n    desc: \"Displays latest version of each test profile\",\n}\n\nexport const FAILED = {\n    name: \"Failed\",\n    idx: FAILED_IDX,\n    checked: false,\n    disabled: false,\n    children: [CHECKSUM_IDX, REDIRECTS_IDX, DOWNLOAD_IDX],\n    competes: [ NOT_TESTED_IDX],\n    //hide: [ NOT_TESTED_IDX, TIMED_OUT_IDX],\n    desc: \"Displays all test profiles that failed\",\n}\n\nexport const NONE = {\n    name: \"All\",\n    idx: NONE_IDX,\n    checked: true,\n    disabled: false,\n    competes:[REDIRECTS_IDX, DOWNLOAD_IDX, CHECKSUM_IDX],\n    children: [MD5_IDX, SHA_IDX, R301_IDX,R302_IDX],\n    desc: \"Displays all test profiles with an invalid checksum\",\n}\n\nexport const NOT_TESTED = {\n    name: \"Not Tested\",\n    idx: NOT_TESTED_IDX,\n    checked: false,\n    disabled: false,\n    competes: [FAILED_IDX],\n    desc: \"Displays all tests profiles which were not tested\",\n}\n\nexport const MD5 = {\n    name: \"MD5 Failed\",\n    idx: MD5_IDX,\n    checked: false,\n    disabled: true,\n    desc: \"Displays all test profiles with an invalid MD5 checksum\",\n}\n\nexport const SHA = {\n    name: \"SHA256 Failed\",\n    idx: SHA_IDX,\n    checked: false,\n    disabled: true,\n    desc: \"Displays all test profiles with an invalid SHA256 checksum\",\n}\n\nexport const CHECKSUM = {\n    name: \"Checksums\",\n    idx: CHECKSUM_IDX,\n    checked: false,\n    disabled: true,\n    competes:[REDIRECTS_IDX, DOWNLOAD_IDX, NONE_IDX],\n    children: [MD5_IDX, SHA_IDX],\n    desc: \"Displays all test profiles with an invalid checksum\",\n}\n\nexport const DOWNLOAD = {\n    name: \"Downloads\",\n    idx: DOWNLOAD_IDX,\n    checked: false,\n    disabled: true,\n    competes:[REDIRECTS_IDX, CHECKSUM_IDX, NONE_IDX],\n    children: [TIMED_OUT_IDX, NOT_FOUND_IDX],\n    //children: [TIMED_OUT_IDX],\n    desc: \"Displays all test profiles with download issues\",\n}\n\nexport const TIMED_OUT = {\n    name: \"Timed Out\",\n    idx: TIMED_OUT_IDX,\n    checked: false,\n    disabled: false,\n    competes:[NOT_FOUND_IDX],\n    desc: \"Displays all tests profiles that timed out during the download\",\n}\n\nexport const NOT_FOUND = {\n    name: \"404 - Not Found\",\n    idx: NOT_FOUND_IDX,\n    checked: false,\n    disabled: false,\n    competes:[TIMED_OUT_IDX],\n    desc: \"Displays all tests profiles that produced a HTTP 404\",\n}\n\nexport const REDIRECTS = {\n    name: \"Redirects\",\n    idx: REDIRECTS_IDX,\n    checked: false,\n    disabled: true,\n    children: [R301_IDX, R302_IDX],\n    competes:[CHECKSUM_IDX, DOWNLOAD_IDX, NONE_IDX],\n    desc: \"Displays all test profiles with A HTTP redirect status\",\n}\n\nexport const R301 = {\n    name: \"301 Error\",\n    idx: R301_IDX,\n    checked: false,\n    disabled: true,\n    desc: \"Displays all test profiles with a HTTP Status of 301\",\n}\n\nexport const R302 = {\n    name: \"302 Error\",\n    idx: R302_IDX,\n    checked: false,\n    disabled: true,\n    desc: \"Displays all test profiles with a HTTP Status of 302\",\n}\n\n// JSON\nexport const JSON_FAILED = \"Failed\";    \nexport const JSON_FAILURES = \"Failures\"; \nexport const JSON_PASSED = \"Passed\";\nexport const JSON_MD5 = \"md5\";\nexport const JSON_SHA256 = \"sha256\";\nexport const JSON_NOT_TESTED=\"Not Tested\";\nexport const JSON_HTTP_CODE=\"httpStatus\";\nexport const JSON_TIMED_OUT=0;\nexport const JSON_ERROR=\"error\";\nexport const JSON_HTTP_301=\"301\";\nexport const JSON_HTTP_302=\"302\";\nexport const JSON_404=\"404\";\n\n// HTTP Code Errors that are being tracked\nexport const HTTP_0=0; // ftp download timeout\nexport const HTTP_301=301;\nexport const HTTP_302=302;\n\n\n\n\n\n\n\n\n\n\n","import React from 'react';\n\nimport { Icon } from '@iconify/react';\nimport TriangleIcon from '@iconify-icons/mdi/triangle';\nimport CircleIcon from '@iconify-icons/mdi/circle'\nimport SquareIcon from '@iconify-icons/mdi/square'\nimport StarIcon from '@iconify-icons/mdi/star';\nimport RhombusIcon from '@iconify-icons/mdi/rhombus';\n\nimport {theme} from './theme';\nimport * as Constants from \"../Constants\";\n\n/** Determine the color of the signifier based on the nature of the error.\n * @param {Integer} color   The status color based on the severity of the error ie a 404 is error while a 302 is info\n * @returns {String}        A theme based color for the status color\n */\nexport function getStatusColor(color){\n    let col;\n\n    switch(color) {\n        case Constants.COLOR_PASS :\n        case Constants.COLOR_NOT_TESTED:\n            col = theme.palette.primary.main;\n            break;\n        case Constants.COLOR_FAIL:\n            col = theme.palette.secondary.main;\n            break;\n        case Constants.COLOR_404:\n            col = theme.palette.error.main;\n            break;\n        case Constants.COLOR_HTTP:\n        case Constants.COLOR_TIMEOUT:\n            col = theme.palette.warning.main;\n            break;\n        case Constants.COLOR_HTTP_0:    \n            col = theme.palette.error.main;\n            break;\n        case Constants.COLOR_MD5:\n            col = theme.palette.error.light;\n            break;\n        case Constants.COLOR_CHECKSUM:\n        case Constants.COLOR_REDIRECT:\n        case Constants.COLOR_DOWNLOAD:\n        case Constants.COLOR_NO_CATEGORY:\n            col = theme.palette.primary.main;\n            break;\n        case Constants.COLOR_SHA:\n            col = theme.palette.error.dark;\n            break;\n        case Constants.COLOR_301:\n        case Constants.COLOR_WARNING:\n            col = theme.palette.warning.main;\n            break;\n        case Constants.COLOR_302:\n            col = theme.palette.pass.main;\n            break;\n        \n        default:\n            col = theme.palette.error.main;\n    }\n\n    return col;\n}\n\n/**\n * Determines the icon to display based on the nature of the error.\n * Error can be either: Checksum, Download, Redirect, Not Tested or Undefined ie a HTTP 226 error\n * @param {Integer} stat    The error as defined by Constants.COLOR_*\n* @param {Integer}  col     The color of the icon based on the severity of the error type. See getStatusColour()\n * @param {Integer} key     Key required bt react map fn\n * @returns Icon Component representing error\n */\nexport function getIconShape(stat,col,key){\n    let shape;\n\n    switch(stat) {\n        case Constants.COLOR_PASS :\n        case Constants.COLOR_FAIL:\n            shape = null;\n            break;\n        case Constants.COLOR_DOWNLOAD:\n        case Constants.COLOR_404:\n        case Constants.COLOR_HTTP: \n        case Constants.COLOR_TIMEOUT:\n        case Constants.COLOR_HTTP_0:  \n            shape = <Icon icon={CircleIcon} color={col} style={{marginLeft:\"0.5em\"}} key={key}/>          \n            break;\n        case Constants.COLOR_CHECKSUM:\n        case Constants.COLOR_MD5:\n        case Constants.COLOR_SHA:\n            shape = <Icon icon={SquareIcon} color={col} style={{marginLeft:\"0.5em\"}} key={key}/>          \n            break;\n        case Constants.COLOR_REDIRECT:\n        case Constants.COLOR_301:\n        case Constants.COLOR_302:\n            shape = <Icon icon={TriangleIcon} color={col} style={{marginLeft:\"0.5em\"}} key={key}/>\n            break;\n        case Constants.COLOR_NOT_TESTED:\n            shape = <Icon icon={StarIcon} color={col} style={{marginLeft:\"0.5em\"}} key={key}/>\n            break;\n        case Constants.COLOR_NO_CATEGORY:\n        default:\n            shape = <Icon icon={RhombusIcon} color={col} style={{marginLeft:\"0.5em\"}} key={key}/>\n    }\n\n    return shape;\n}\n\n/** Color of the checkboxes and radio button\n *  These match the color category that will be used against each profile.\n * ie redirects are green so 301 and 302 will be based on green colors\n */\nexport function getCheckboxColor(index){\n    let col;\n\n    switch(index) {\n        case Constants.ALL_IDX:\n        case Constants.LATEST_IDX:\n        case Constants.NOT_TESTED_IDX:\n            col = theme.palette.primary.main;\n            break;\n        case Constants.NONE_IDX:\n            col = theme.palette.primary.main;\n            break;    \n        case Constants.CHECKSUM_IDX:\n            col = theme.palette.primary.main;\n            break;\n        case Constants.REDIRECTS_IDX:\n            col = theme.palette.primary.main;\n            break;\n        case Constants.DOWNLOAD_IDX:\n            col = theme.palette.primary.main;\n            break;\n        default:\n            col = null;\n    }\n    return col;\n}\n\n/**\n * Iterates though each status and returns the appropriate Signifier\n * @param {Array} status Error Status ie Constants.COLOR_301\n * @returns Icon component with shape and color reflecting error status\n */\nconst getTestSignifiers = (status) => {\n    let signifier = null;\n    \n    if (!status) {\n        signifier = null;     \n    } else {\n        signifier = status.map((stat, key) => {\n            // If the test passed or failed this is already indicated by the color of the text\n            if (stat === Constants.COLOR_PASS || stat === Constants.COLOR_FAIL)\n                return null;\n\n            let col = getStatusColor(stat);\n            return getIconShape(stat, col, key);\n        })\n    }\n    \n    return signifier;   \n}\n\n/**\n * \n * @param {Object} props colorStatus an array or single index representing\n * @returns \n */\nexport default function PTSSignifier(props) {\n    const {colorStatus : status} = props;\n    \n    return (<>{getTestSignifiers(status)}</>);\n}","import { makeStyles } from '@material-ui/core/styles';\nimport { theme } from './theme';\n\nexport const useStyles = makeStyles(() => ({\n   \n    // Container\n    root: {\n      background: \"#fbfffc\",\n      marginBottom: \"3em\",\n      flexGrow: 1,\n    },\n\n    // Displays before page loads\n    progressBar: {\n      color: theme.palette.secondary.main,\n      position: \"relative\",\n      marginTop: \"20%\"\n    },\n\n    // Clear Button\n    button: {\n        background: theme.palette.primary.main,\n        color: theme.palette.primary.contrastText,\n        fontWeight: theme.typography.fontWeightBold,\n        border: 0,\n        borderRadius: theme.shape.borderRadius,\n        padding: '5px 30px',\n        fontSize: 12,\n        marginTop: \"0.5em\"\n    },\n    toolbar: {\n      background: theme.palette.primary.main,\n      padding: '1em',\n    },\n    toolbar_sm: {\n      background: theme.palette.primary.main,\n    },\n    toolbar_margins: {\n      marginTop:\"4em\",\n      [theme.breakpoints.down('sm')]: {\n        marginTop: \"1em\",\n      },\n    },\n    failed_checkbox_margins: {\n      [theme.breakpoints.down('sm')]: {\n        marginLeft: \"1.5em\",\n      },\n    },\n    filter_margins: {\n      marginTop: \"0.5em\",\n      [theme.breakpoints.down('sm')]: {\n        margin: \"1.5em 0 1.5rem 0em\",\n      },\n    },\n    // Contains the Legend Details\n    paper: {\n      padding: theme.spacing(2),\n      margin: \"1rem 1rem 1rem 0rem\",\n      textAlign: \"left\",\n      color: theme.palette.text.secondary,\n      height: \"80%\",\n    },\n\n    // keep for debugging\n    borders: {\n        borderWidth: 1,\n        borderColor: \"black\",\n        borderStyle: \"solid\", \n    },\n\n    // checkboxes tool tip\n    checkboxTip: {\n      color: theme.palette.common.black,\n      fontSize: \"48!important\",\n    },\n    tableHeader: {\n      backgroundColor: theme.palette.grey[200],\n    },\n\n    // Rows containing the profile Name\n    profileNameRow: {\n      backgroundColor: theme.palette.grey[200],\n      '&:nth-of-type(odd)': {\n        backgroundColor: theme.palette.grey[100],\n      },\n    },\n\n    // Cell which displays the number of results\n    resultsRow:{\n      padding: \"0.5rem\",\n      fontWeight: theme.typography.fontWeightBold,\n      backgroundColor: theme.palette.grey[300],\n    },\n    \n    // Profile Name titles\n    profileName:\n    {\n      padding: \"0.5rem\",\n      fontWeight: theme.typography.fontWeightBold,\n      '&:hover' : {\n        fontWeight:theme.typography.fontWeightBold,\n        cursor: \"pointer\",\n      },\n    },\n\n    // Rows containing package Names title\n    packageName: {\n      marginLeft: \"2em\",\n      fontWeight: theme.typography.fontWeightMedium,\n      '&:hover' : {\n        fontWeight: theme.typography.fontWeightBold,\n        cursor: \"pointer\",\n      },\n      borderTopColor: \"black\",\n      borderTopWidth: \"2px\",\n      borderTopStyle: \"solid\",\n    },\n\n    // Rows containing package Names Details FileName/FileSize\n    packageNameRow: {\n      backgroundColor: theme.palette.grey[100],\n\n    },\n\n    // Rows containing mirror details ie Status/Duplicate/Failures\n    mirrorRow: {\n      backgroundColor: theme.palette.grey[100],\n    },\n\n    // Rows containing failure details ie MD5/SHA246\n    failureRow: {\n      backgroundColor: theme.palette.grey[100],\n    },\n\n    // Heading throughout Table, usually keys in JSON File\n    heading: {\n         color: theme.palette.text.primary, //black\n         fontWeight:theme.typography.fontWeightMedium,\n         marginLeft: \"3em\"\n    },\n\n    // Headings throughout table, usually values from JSON file\n    secondaryHeading: {\n         color: theme.palette.text.secondary\n    },\n\n    // Heading under collapsed Mirror ie Mirror 1\n    mirrorHeading: {\n      marginLeft: \"3em\",\n      '&:hover' : {\n        fontWeight:theme.typography.fontWeightBold,\n        cursor: \"pointer\",\n      },\n    },\n\n    // Heading under collapsed Mirror ie the url reflecting the mirror\n    mirrorSecondaryHeading: {\n      '&:hover' : {\n        fontWeight:theme.typography.fontWeightBold,\n        cursor: \"pointer\",\n      },\n      // textAlign: \"inherit\", \n    },\n\n    // Headings for the mirror data. Usually keys like Status/Duplicate/Failures\n    mirrorDataHeading: {\n      color: theme.palette.text.primary, //black\n      fontWeight:theme.typography.fontWeightMedium,\n      width: \"130px\",\n    },\n\n    // Headings for the failures\n    failureHeading: {\n      color: theme.palette.text.primary, //black\n      fontWeight:theme.typography.fontWeightMedium,\n },\n    //TextField details\n    searchField: {\n      backgroundColor: theme.palette.background.textfield,\n      marginTop:\"0.5em\",\n    },\n\n    // disable the circle that appears when hovering over a checkbox\n    checkboxes: {\n      '&:hover': {\n        backgroundColor: \"transparent\"\n      }, \n    },\n\n    helpIcon: {\n      color: theme.palette.secondary.light,\n    }\n    \n  }));\n\n  export default useStyles;\n","import React, { useState } from 'react';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport Radio from '@material-ui/core/Radio';\nimport Grid from '@material-ui/core/Grid';\nimport { FormControlLabel } from '@material-ui/core';\n\nimport {getCheckboxColor} from './PTSSignifier';\nimport * as Constants from \"../Constants\";\nimport useStyles from \"./styles\";\n//import Checkboxes from './Checkboxes';\n\n// Developer Note: Originally there were checkboxes. In the second iteration, radio buttons\n// were introduced but referred to as checkboxes to reuse functionality.\n// If reworked, this component should be renamed to Filters but for now interpret\n// both checkboxes and radio buttons as filters.\n\n// List of filters that can be applied to the JSON data to extract results\nconst checkboxList = [\n  {filter: Constants.ALL}, \n  {filter: Constants.LATEST},\n  {filter: Constants.FAILED},\n  {filter: Constants.MD5},\n  {filter: Constants.SHA},\n  {filter: Constants.REDIRECTS}, \n  {filter: Constants.NOT_TESTED},\n  {filter: Constants.TIMED_OUT},\n  {filter: Constants.CHECKSUM}, \n  {filter: Constants.DOWNLOAD}, \n  {filter: Constants.NOT_FOUND}, \n  {filter: Constants.R301},  \n  {filter: Constants.R302},  \n  {filter: Constants.NONE},  \n];\n\n// Takes the filter list and sets default properties to create, name and set checkboxes\nconst getDefaultCheckboxes = () =>\n  checkboxList.map((box, index) => { \n    const {idx, name, checked, desc, disabled} = box.filter;\n    return ({\n      idx, \n      name,\n      checked,\n      desc,\n      disabled,\n      children: (\"children\" in box.filter) ? box.filter.children : null,\n      hide: (\"hide\" in box.filter) ? box.filter.hide : null,\n      competes: (\"competes\" in box.filter) ? box.filter.competes : null,\n})});\n\n/**\n * Returns name of checkbox based on the checkbox index value\n * @param {} index  Checkbox index value ie Constants.ALL.idx\n * @returns Checkbox name defined by name key in Object ie Constants.ALL.name\n */\nexport function getCheckboxName(index) {\n  return checkboxList.filter(cb => cb.filter.idx === index)[0].filter.name;  \n}\n\n/**\n * Determines the state of the various checkboxes defined in the filterList.\n * The combination of these checkboxes will be used to determine the filters to apply to the JSON values\n * @param defaultCheckboxes \n * @return all the checkboxes and their current state\n * \n */\nexport function useCheckboxes(defaultCheckboxes) {\n  const [checkboxes, setCheckboxes] = useState(\n    defaultCheckboxes || getDefaultCheckboxes(),\n  );\n\n  function manageState(index, checked) {\n      let currBox = checkboxes[index];\n      currBox.checked = checked;\n      checkboxes.map(box => {\n        // if the current selection competes with any other checkbox then turn it off.\n        // ie Latest Version and All Tests conflict\n        if ( currBox.idx !== box.idx) {\n\n          if (currBox.checked && \"competes\" in currBox && currBox.competes !==null) {\n            if (currBox.competes.includes(box.idx)) {\n               box.checked = false;\n               // Check if the childbox has children also (only 3 layers, otherwise use recursion)\n              if (box.children !== null) {\n                box.children.forEach(index => {\n                  checkboxes[index].checked = false;\n                  checkboxes[index].disabled = true;         \n                });\n              }\n            }\n          }\n\n          // Disable the fields that do not align with the current selection\n          if (\"hide\" in currBox && currBox.hide !== null) {\n            if (currBox.hide.includes(box.idx))\n               box.disabled = currBox.checked;\n          }\n        }\n\n        // if the box is a child of the current selection, match the parent state\n        // ie disable and uncheck all children (MD5 and SHA) of the parent (Failed)\n        if (\"children\" in currBox && currBox.children !== null){\n          if (currBox.children.includes(box.idx)) {\n            box.disabled = !currBox.checked;\n            if (box.disabled) {\n              box.checked = false;\n\n              // Check if the parent has children also (only 2-3 layers, otherwise use recursion)\n              if (box.children !== null) {\n                box.children.forEach(index => {\n                  checkboxes[index].checked = false;\n                  checkboxes[index].disabled = true;         \n                });\n              }\n            }\n          }\n        }\n        return box;\n      });\n  }\n\n  \n  /**\n   * Set and manage the state when a checkbox/filter is selected\n   * \n   * @param {*} index   Index of the checkbox/filter selected ie Constants.ALL.idx\n   * @param {*} checked Boolean, true if selected\n   */\n  function setCheckbox(index, checked) {\n    manageState(index,checked);\n    const newcheckboxes = [...checkboxes];\n    newcheckboxes[index].checked = checked;\n    setCheckboxes(newcheckboxes);\n  }\n\n  // same as a standard use hook\n  return {\n    checkboxes,\n    setCheckbox,\n  };\n}\n\n/**\n * Radio works same as createCheckboxes, except from UI perspective it provides an OR functionality\n * @param {*} classes     The styles to be applied\n * @param {*} checkboxes  The list of filters\n * @param {*} setCheckbox checkboxes state callback\n * @param {*} index       Index of the given checkbox ie Constants.ALL.idx\n */\nconst createRadio = (classes, checkboxes, setCheckbox, index) => {\n  const chCol = getCheckboxColor(index);\n\n  return (\n    <>\n      <FormControlLabel \n        control=\n          {<>\n            {/* // <Tooltip arrow enterNextDelay={2000} className={classes.checkboxTip} title={checkboxes[index].desc}> */}\n              <Radio\n                className={classes.checkboxes}\n                disabled={checkboxes[index].disabled}\n                style={{'&:hover': {backgroundColor: \"transparent\"}, color:chCol}}\n                checked={checkboxes[index].checked}\n                onChange={e => {setCheckbox(checkboxes[index].idx, e.target.checked)}}\n              /> \n              </>\n            //  </Tooltip>\n          }\n        label={checkboxes[index].name}\n        disabled={checkboxes[index].disabled}\n      />\n      {/* <PTSSignifier colorStatus={index}/> */}\n\n    </>\n  )\n}\n\n/**\n * Create and display the checkboxes on the UI\n * @param {*} classes     The styles to be applied\n * @param {*} checkboxes  The list of filters\n * @param {*} setCheckbox checkboxes state callback\n * @param {*} index       Index of the given checkbox ie Constants.ALL.idx\n */\nfunction createCheckbox(classes, checkboxes, setCheckbox, index) {\n  const chCol = getCheckboxColor(index);\n  return (\n    <>\n      <FormControlLabel\n        control={\n          <>\n            {/* // <Tooltip arrow enterNextDelay={2000} className={classes.checkboxTip} title={checkboxes[index].desc}> */}\n            <Checkbox\n              className={classes.checkboxes}\n              disabled={checkboxes[index].disabled}\n              style={{ '&:hover': { backgroundColor: \"transparent\" }, color: chCol }}\n              checked={checkboxes[index].checked}\n              onChange={e => { setCheckbox(checkboxes[index].idx, e.target.checked); } } />\n          </>\n          //  </Tooltip>\n        }\n        label={checkboxes[index].name}\n        disabled={checkboxes[index].disabled} />\n      {/* <PTSSignifier colorStatus={index}/> */}\n    </>\n  );\n}\n\n/**\n * Create the filters to be displayed on the UI\n * @param {*} checkbox state hook\n * @returns Fragment detailing filters to be displayed on UI\n */\nfunction Checkboxes({ checkboxes, setCheckbox}) {\n  const classes =useStyles();\n\n  return (\n    <React.Fragment>\n\n      <Grid item xs={12} sm={3} md={2} lg={2}>\n          <Grid container direction=\"column\" >\n            <Grid item>{createCheckbox(classes, checkboxes, setCheckbox, Constants.ALL.idx)}</Grid>\n            <Grid item>{createCheckbox(classes, checkboxes, setCheckbox, Constants.LATEST.idx)}</Grid>\n            <Grid item>{createCheckbox(classes, checkboxes, setCheckbox, Constants.FAILED.idx)}</Grid>\n            <Grid item >{createCheckbox(classes, checkboxes, setCheckbox, Constants.NOT_TESTED.idx)}</Grid>\n\n          </Grid>\n      </Grid>\n      <Grid item xs={12} sm={3} md={2} lg={2}>\n         {checkboxes[Constants.FAILED.idx].checked ?\n            (<>\n              <Grid className={classes.failed_checkbox_margins} container direction=\"column\" >\n                <Grid>{createRadio(classes, checkboxes, setCheckbox, Constants.CHECKSUM.idx)}</Grid>\n                <Grid>{createRadio(classes, checkboxes, setCheckbox, Constants.REDIRECTS.idx)}</Grid>\n                <Grid>{createRadio(classes, checkboxes, setCheckbox, Constants.DOWNLOAD.idx)}</Grid>\n                <Grid>{createRadio(classes, checkboxes, setCheckbox, Constants.NONE.idx)}</Grid>\n              </Grid></>\n              ) : null}\n      </Grid>\n    </React.Fragment>\n  );\n}\n\nexport default Checkboxes;\n\n\n","import React from 'react';\nimport Popover from '@material-ui/core/Popover';\nimport Typography from '@material-ui/core/Typography';\nimport Box from '@material-ui/core/Box';\nimport HelpIcon from '@material-ui/icons/Help';\nimport IconButton from '@material-ui/core/IconButton';\nimport {theme} from './theme';\nimport useStyles from \"./styles\";\nimport PTSSignifier from './PTSSignifier';\nimport * as Constants from '../Constants';\n\nexport default function PTSHelp() {\n  const [anchorEl, setAnchorEl] = React.useState(null);\n  const classes = useStyles();                        \n\n  // Hide/Display the Help Information\n  const handleClick = (event) => {\n    setAnchorEl(event.currentTarget);\n  };\n\n  const handleClose = () => {\n    setAnchorEl(null);\n  };\n\n  const open = Boolean(anchorEl);\n  const id = open ? 'simple-popover' : undefined;\n\n  return (\n    <>\n        <IconButton aria-describedby={id} className={classes.helpIcon}  onClick={handleClick}>\n            <HelpIcon/>\n        </IconButton>\n        \n        <Popover\n            id={id}\n            open={open}\n            anchorEl={anchorEl}\n            onClose={handleClose}\n            anchorOrigin={{\n                vertical: 'bottom',\n                horizontal: 'center',\n            }}\n            transformOrigin={{\n                vertical: 'top',\n                horizontal: 'center',\n            }}    \n        >\n            <Box margin='1em'>\n                <Typography variant=\"h6\"> \n                    <Box fontWeight='fontWeightBold' display='inline'>Background</Box> \n                </Typography>\n\n                <Typography component=\"div\" >Check Test Results is generated by running the \n                    <Box fontWeight='fontWeightBold' display='inline'> ./phoronix-test-suite check-tests\n                    </Box> command in the Phoronix Test Suite. \n                </Typography> \n\n                <Typography>Each Test Profile is iterated to extract a download.xml file. </Typography>\n                <Typography>If a Test Profile does not contain a download.xml file the Test Profile is tagged as Not Tested.</Typography>\n                <Typography>If a Test Profile does contains a download.xml file, the contents are examined to determine the validity of the file location, the download\n                and MD5 and SHA256 checksums.</Typography>\n                <br/>\n\n                <Typography>If any errors are present the Error Type and Error Status\n\n                    <Box fontWeight='fontWeightMedium' display='inline' style={{color:theme.palette.secondary.main}}> (red, </Box> \n                    <Box fontWeight='fontWeightMedium' display='inline' style={{color:theme.palette.warning.main}}> orange, </Box> \n                    <Box fontWeight='fontWeightMedium' display='inline' style={{color:theme.palette.pass.main}}> green) </Box> \n                    will be displayed against the Profile Name and against the Mirror where the error occurred. The \n                    <Box fontWeight='fontWeightBold' display='inline'> Legend Box </Box>\n                    can be selected to display more details about the Type and Status of the error.\n                </Typography>\n                <br/>\n                <Typography>\n                    In some cases a Passed test may appear with an Error Type Signifier such as \n                    <Box fontWeight='fontWeightBold' style={{color:theme.palette.primary.main}} display='inline'> Test Profile</Box> \n                    <Box display=\"inline\"><PTSSignifier  colorStatus={[Constants.COLOR_301]}/>. </Box>\n                    This indicates that a mirror failed with a HTTP 301 Status, but other working mirrors are available. \n                </Typography>\n                <br/>\n\n                <Typography variant=\"h6\"> \n                    <Box fontWeight='fontWeightBold' display='inline'>Navigating The Page</Box> \n                </Typography>\n\n                <Typography component=\"div\">To examine a Test Profile click on the \n                    <Box fontWeight='fontWeightBold' style={{color:theme.palette.primary.main}} display='inline'> Profile. </Box> \n                </Typography>\n\n                <Typography>\n                    Each <Box fontWeight='fontWeightBold' style={{color:theme.palette.primary.main}} display='inline'> Profile </Box>\n                    may contain one or more clickable<Box fontWeight='fontWeightBold' style={{color:theme.palette.primary.main}} display='inline'> Packages. </Box>\n                </Typography>\n\n                <Typography>\n                Each <Box fontWeight='fontWeightBold' style={{color:theme.palette.primary.main}} display='inline'> Package </Box>\n                may contain one or more clickable <Box fontWeight='fontWeightBold' style={{color:theme.palette.primary.main}} display='inline'> Mirrors. </Box>\n                </Typography>\n\n                <Typography>\n                    Click on the \n                    <Box fontWeight='fontWeightBold' style={{color:theme.palette.primary.main}} display='inline'> Mirror, </Box>\n                    to see details about the Failures.\n                </Typography>\n                <br/>\n                <Typography>\n                    Hint: Any colored text can be clicked.\n                </Typography>\n                <br/>      \n                <br/>\n\n                <Typography component=\"div\" variant=\"h6\"> \n                    <Box fontWeight='fontWeightBold' display='inline'>Filters</Box> \n                </Typography>\n                <Typography component=\"div\">Tests can be filtered based on what you want to see.</Typography>\n                <Typography component=\"div\">\n                    <Box ml={5} fontWeight='fontWeightBold' display='inline'> All Versions:</Box> Displays all the tests.\n                </Typography>\n                <Typography component=\"div\">\n                    <Box ml={5} fontWeight='fontWeightBold' display='inline'> Latest Versions:</Box> Displays the latest version for each Test Profile.\n                </Typography>\n                <Typography component=\"div\">\n                    <Box ml={5} fontWeight='fontWeightBold' display='inline'> Failed:</Box> Displays all tests that failed.\n                </Typography>\n                <Typography component=\"div\">\n                    <Box ml={5} fontWeight='fontWeightBold' display='inline'> Not Tested:</Box> Displays all tests which were not tested and therefore have no results.\n                </Typography>\n                <Typography component=\"div\">\n                    <Box ml={5} fontWeight='fontWeightBold' display='inline'> Checksum</Box> Displays all tests which have a failed checksum.\n                </Typography>\n                <Typography component=\"div\">\n                    <Box ml={5} fontWeight='fontWeightBold' display='inline'> Rediects:</Box> Displays all tests which resulted in a HTTP 301 or 302 status.\n                </Typography>\n                <Typography component=\"div\">\n                    <Box ml={5} fontWeight='fontWeightBold' display='inline'> Downloads:</Box> Displays all tests that produced an unsuccessful download.\n                </Typography>\n                <Typography component=\"div\">\n                    <Box ml={5} fontWeight='fontWeightBold' display='inline'> All:</Box> Displays all tests which had a failed Checksum, Redirect or Download.\n                </Typography>     \n                <br/>\n                <br/>\n\n                <Typography variant=\"h6\"> \n                    <Box fontWeight='fontWeightBold' display='inline'>Explaination of Terms</Box> \n                </Typography>\n                <Typography component=\"div\" >Each Test Profile contains one or more \n                    <Box fontWeight='fontWeightBold' display='inline'> packages. </Box>\n                    Each Package contains one or more \n                    <Box fontWeight='fontWeightBold' display='inline'> mirrors. </Box> \n                </Typography>\n                <br/>\n\n                <Typography component=\"div\"> \n                    <Box fontWeight='fontWeightBold' display='inline'> Packages</Box> contain:\n                </Typography>\n                <Typography component=\"div\">\n                    <Box ml={5} fontWeight='fontWeightBold' display='inline'> File Name:</Box> Name of the file downloaded from the vendor.\n                </Typography>\n                <Typography component=\"div\">\n                    <Box ml={5} fontWeight='fontWeightBold' display='inline'> File Size: </Box> Size of the file downloaded from the vendor.\n                </Typography>\n                <Typography component=\"div\">\n                    <Box ml={5} fontWeight='fontWeightBold' display='inline'> SHA256: </Box> SHA256 Key if provided. May be blank. \n                </Typography>\n                <Typography component=\"div\">\n                    <Box ml={5} fontWeight='fontWeightBold' display='inline'> MD5: </Box> MD5 Key if provided. May be blank. \n                </Typography>\n                <br/>\n\n                <Typography component=\"div\"> \n                    <Box fontWeight='fontWeightBold' display='inline'> Mirrors</Box> contain:\n                </Typography>\n                <Typography component=\"div\">\n                    <Box ml={5} fontWeight='fontWeightBold' display='inline'>Status:</Box> The test passed or failed.\n                </Typography>\n                <Typography component=\"div\">\n                    <Box ml={5} fontWeight='fontWeightBold' display='inline'>Source: </Box> The test was identical to a previously downloaded test and was reused.\n                </Typography>\n                <Typography component=\"div\">\n                    <Box ml={5} fontWeight='fontWeightBold' display='inline'>URL: </Box> The location of the downloaded test. In most cases this will download the test. \n                </Typography>\n                <Typography component=\"div\">\n                    <Box ml={5} fontWeight='fontWeightBold' display='inline'>Download Time: </Box> The time taken in millisecs to download the test. \n                </Typography>\n                <Typography component=\"div\">\n                    <Box ml={5} fontWeight='fontWeightBold' display='inline'>Redirect To: </Box> URL used when HTTP 302 Redirect is encountered. \n                </Typography>\n            \n                <br/>\n                <Typography component=\"div\"> \n                    <Box fontWeight='fontWeightBold' display='inline'> Failures</Box> contain:\n                </Typography>\n                <Typography component=\"div\">\n                    <Box ml={5} fontWeight='fontWeightBold' display='inline'>File Size:</Box> The file size downloaded does not match the package filesize.\n                </Typography>\n                <Typography component=\"div\">\n                    <Box ml={5} fontWeight='fontWeightBold' display='inline'>MD5: </Box> The MD5 checksum does not match the package MD5 checksum.\n                </Typography>\n                <Typography component=\"div\">\n                    <Box ml={5} fontWeight='fontWeightBold' display='inline'>SHA256: </Box> The SHA256 checksum does not match the package MD5 checksum. \n                </Typography>\n                <Typography component=\"div\">\n                    <Box ml={5} fontWeight='fontWeightBold' display='inline'>Vendor: </Box> Returned HTTP Status Code when attempting to download file.\n                </Typography>\n                <Typography component=\"div\">\n                    <Box ml={5} fontWeight='fontWeightBold' display='inline'>Timed Out: </Box> File failed to download due to a curl time out. Note, Time Out \n                    can be configured by setting the Download Rate when running the ./phoronix-test-suite check-tests command.\n                </Typography> \n            </Box>\n        </Popover> \n    </>\n  );\n}","import React from 'react';\nimport Paper from '@material-ui/core/Paper';\nimport PTSSignifier from './PTSSignifier';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\nimport Box from '@material-ui/core/Box';\n\nimport useStyles from \"./styles\";\nimport * as Constants from \"../Constants\";\nimport {theme} from './theme';\n\n/**\n * Create the signifier and description.\n * \n * @param {*} colIdx Defines the shape of the signifier based on Constants.COLOR_*\n * @param {*} colName Description of the signifier\n * @returns Icon and Description of Icon\n */\nconst createLegend = (colIdx, colName) => {\n  return (\n    <Grid item container>\n      <Grid item style={{marginTop:'0.25em'}}><PTSSignifier  colorStatus={colIdx}/></Grid>\n      <Grid item style={{marginLeft:'1em'}}><Typography>{colName}</Typography></Grid>\n    </Grid>\n  );\n}\n\n/**\n * Create the legend which is displayed/hidden by the Legend Checkbox.\n * @returns Legend\n */\nexport default function Legend() {\n    const classes =useStyles();\n\n    return (\n      <>  \n        <Grid container>\n\n          <Grid item xs={12} sm={6} md={6} lg={6}>\n              <Box fontWeight=\"fontWeightMedium\">Error Type</Box>\n              <Paper className={classes.paper}>\n                {createLegend([Constants.COLOR_MD5], 'MD5 Error')}\n                {createLegend([Constants.COLOR_SHA], 'SHA256 Error')}\n                {createLegend([Constants.COLOR_301], 'Redirect 301 Error')}\n                {createLegend([Constants.COLOR_302], 'Redirect 302 Error')}\n                {createLegend([Constants.COLOR_TIMEOUT], 'Download Timed Out')}\n                {createLegend([Constants.COLOR_404], 'Not Found 404 Error')}\n                {createLegend([Constants.COLOR_HTTP_0], 'HTTP 0 Error')}                \n              </Paper>\n            </Grid>\n\n            <Grid item xs={12} sm={6} md={6} lg={6}>\n            <Box fontWeight=\"fontWeightMedium\">Profile Status</Box>\n              <Paper className={classes.paper}>\n                <Typography style={{color:theme.palette.primary.main}}>Passed</Typography>\n                <Typography style={{color:theme.palette.warning.dark}}>Contains Potential Failures</Typography>\n                <Typography style={{color:theme.palette.secondary.main}}>Contains Failures</Typography>\n                <Typography style={{color:theme.palette.fatal.main}}>All Mirrors Failed</Typography>\n                {createLegend([Constants.COLOR_CHECKSUM], \"Checksum Errors\")}\n                {createLegend([Constants.COLOR_REDIRECT], \"Redirect Errors\")}\n                {createLegend([Constants.COLOR_DOWNLOAD], \"Download Errors\")}\n                {createLegend([Constants.COLOR_NO_CATEGORY], \"Other Errors\")}  \n                {createLegend([Constants.COLOR_NOT_TESTED], 'Not Tested')}\n              \n              </Paper>\n          </Grid>\n\n        </Grid>\n      </>\n    )\n}","import TableCell from '@material-ui/core/TableCell';\nimport { withStyles } from '@material-ui/core/styles';\n\n const StyledTableCell = withStyles((theme) => ({\n    head: {\n      color: theme.palette.common.white,\n      padding: \"0px\",\n      backgroundColor: \"#CCD1D1\", //light grey\n    },\n    body: {\n      fontSize: 14,\n      padding:\"2px\",\n      marginLeft:\"1.5em\",\n      borderWidth: \"2px\",\n      borderStyle: \"dotted\",\n      borderColor: \"#eff1f1\",\n    }\n  }))(TableCell);\n\n  export default StyledTableCell;\n\n  ","import React from 'react';\nimport Typography from '@material-ui/core/Typography';\nimport TableRow from '@material-ui/core/TableRow';\n\n// lodash functions (part of material UI)\nimport startCase from 'lodash/startCase';\nimport toUpper from 'lodash/toUpper';\nimport StyledTableCell from './StyledTableCell';\n\n\nconst PTSFailures = (props) => {\n    const classes = props.classes;\n\n    // Formats and displays the failures\n    const getFailures = (props) => {\n        return Object.entries(props.failed).map(([key,value], idx) => {\n\n            //converts fileSize to File Size; sha256 to SHA256 for display \n            var keyFormatted = key.replace(/^([A-Z]?[a-z]+)+/, startCase);\n            if (keyFormatted.match(\".*\\\\d.*\")) \n                keyFormatted = toUpper(keyFormatted);\n\n            return (\n                <TableRow key={idx}>\n\n                    { (idx === 0) && \n                        <>\n                            <StyledTableCell \n                                 className={classes.failureRow}\n                                rowSpan={Object.entries(props.failed).length}\n                             />\n                            <StyledTableCell \n                                className={classes.failureRow}\n                                rowSpan={Object.entries(props.failed).length} \n                                style={{verticalAlign: \"text-top\"}}>\n                                    <Typography className={classes.mirrorDataHeading}>Failures</Typography>   \n                            </StyledTableCell> \n                        </>  \n                    }\n\n                    <StyledTableCell className={classes.failureRow} >\n                        <Typography className={classes.failureHeading} style={{marginLeft : \"0px\"}}>{keyFormatted}</Typography>\n                    </StyledTableCell>\n                    <StyledTableCell className={classes.failureRow}>\n                        <Typography className={classes.secondaryHeading}>{value}</Typography>\n                    </StyledTableCell>\n                </TableRow>\n            )\n        })\n    }\n    \n    return (\n        <React.Fragment>\n            {getFailures(props)}             \n        </React.Fragment> \n    )\n}\n\nexport default PTSFailures;","import React from 'react';\nimport { useTheme } from '@material-ui/core/styles';\nimport Typography from '@material-ui/core/Typography';\nimport Link from '@material-ui/core/Link';\nimport Collapse from \"@material-ui/core/Collapse\";\nimport TableRow from '@material-ui/core/TableRow';\n\nimport startCase from 'lodash/startCase';\n\nimport Failures from './PTSFailures';\nimport * as Constants from \"../Constants\";\nimport StyledTableCell from './StyledTableCell';\nimport useStyles from \"./styles\";\nimport PTSSignifier from './PTSSignifier';\n\n/**\n * Displays the data that falls under the mirror array. \n * This data relates to how each mirror defined by 'url' peformed during the test.\n * @param props array The Mirror data\n * \n * Mirror -> [{status, duplicate, url, failures {}, download-time}]\n */\nconst PTSMirrors = (props) => {\n    const [openMirror, setOpenMirror] = React.useState(false);\n    const classes= useStyles();\n    const theme = useTheme();\n\n    // open the url. Since most of the urls are downloadable in the JSON, downloads URL.\n    const handleClick = (e) => {\n        window.open(e.target.innerHTML, \"_blank\");\n        e.preventDefault();\n    }\n\n    // Determines the type of data in the cell and returns text, or link\n    const getFormattedCell = (key, value) => {\n        var text = (<Typography className={classes.secondaryHeading}>{value}</Typography>);\n\n        if (key.toLowerCase() === \"duplicate\") {\n            var str = value.slice(value.lastIndexOf(\" \"), value.length);\n            text = (<Typography className={classes.secondaryHeading}>{str}</Typography>);\n        } \n\n        if (key.toLowerCase() === \"url\" || key.toLowerCase() === \"redirectto\") {\n            text = (<Typography>\n                        <Link\n                            color=\"primary\"\n                            href=\"{n}\"\n                            rel=\"noopener\"\n                            onClick={(e) => handleClick(e)}>\n                            {value}\n                        </Link>\n                    </Typography>);\n        }\n\n       return text;\n    }\n    \n    // Mirror collapse component. Will display all the mirror data in collapsible format.\n    const CollapseMirrorComponent = (props) => {\n        var containsFailures = null; \n\n        const result = Object.entries(props.data).map(([key, value], idx) => {\n            if (key.toLowerCase() === \"colorstatus\")\n                return null;\n\n            if (key.toLowerCase() === Constants.JSON_FAILURES.toLowerCase()) {\n                containsFailures = <Failures key={idx} classes={classes} failed={props.data.failures} />\n                return null;\n             } else \n                return (\n                   <TableRow key={idx} >\n                        <StyledTableCell className={classes.mirrorRow}/>   \n                        <StyledTableCell className={classes.mirrorRow}>\n                            <Typography className={classes.mirrorDataHeading}>{startCase(key)}</Typography>\n                        </StyledTableCell>\n                        <StyledTableCell  colSpan={2} className={classes.mirrorRow} >\n                            {getFormattedCell(key,value)}\n                        </StyledTableCell>  \n                    </TableRow>\n\n             );  \n        });\n        \n        // Pushing failures to the end of the list for aesthetics\n        if (containsFailures !==null) \n            result.push(containsFailures);\n        \n        return result;\n    }\n\n    return (\n        <React.Fragment>\n            <TableRow className={classes.packageNameRow}>\n                <StyledTableCell>\n                    <Typography \n                        onClick={() => setOpenMirror(!openMirror)} \n                        className={classes.mirrorHeading}  \n                        style={{ color:(props.data.status !==Constants.JSON_PASSED) ? theme.palette.secondary.main: theme.palette.primary.main}}\n                        >Mirror {props.idx + 1}\n                        <PTSSignifier colorStatus={props.data.colorStatus}/>\n                    </Typography>\n                </StyledTableCell>\n                <StyledTableCell colSpan={3} style={{verticalAlign: \"text-top\"}}>\n                        <Typography \n                            onClick={() => setOpenMirror(!openMirror)} \n                            className={classes.mirrorSecondaryHeading} \n                            style={{ color:(props.data.status !==Constants.JSON_PASSED) ? theme.palette.secondary.main: theme.palette.primary.main}}\n                        >{props.data.url}\n                        </Typography>      \n                </StyledTableCell>               \n            </TableRow>\n\n            <Collapse\n                in={openMirror}\n                timeout='auto'\n                component={() => CollapseMirrorComponent(props)}\n                unmountOnExit>\n            </Collapse>  \n        </React.Fragment>\n    )\n}\n\nexport default PTSMirrors;","import React from 'react';\nimport TableRow from '@material-ui/core/TableRow';\nimport Typography from '@material-ui/core/Typography';\nimport Collapse from \"@material-ui/core/Collapse\";\n\nimport useStyles from \"./styles\";\nimport { withStyles } from '@material-ui/core/styles';\n\nimport * as Constants from \"../Constants\";\nimport PTSMirrors from './PTSMirrors';\nimport StyledTableCell from './StyledTableCell';\n\n/**\n * Diplays the package details of the JSON results\n *  @param props array The Mirror data\n * \n * Package -> [{identifier, pts-filename, pts-filesize, pts-sha256, pts-md5, mirror[]}]\n */\nconst PTSPackages = props => {\n    const packages = props.data;\n    const classes = useStyles();\n    const [open, setOpen] = React.useState(true);  // state of collapse component for displaying mirrors\n\n    const {identifier, \"pts-filename\" : filename, \"pts-filesize\" : filesize, \"pts-sha256\" : sha256, \"pts-md5\" : md5, mirror} = props.data;\n    const hasFailedStatus = (props) => {\n        return props.mirror.some((mirror) => mirror.status === Constants.JSON_FAILED)\n    }\n\n    // Displays the Mirror portion for each package within the Profile\n    // Flow: Profile --1:n--> Packages --1:m--> Mirrors \n    const getMirrors = (props) => {\n        let status = \"unknown\";\n\n        if (props.status) {\n            status = (<span>{props.status}</span>);     \n        } else {\n            status = props.map((mir, key) => {\n                return <PTSMirrors  key={key} identifier={identifier} data={mir} idx={key}/>\n            })\n        }\n        \n        return status;   \n    }\n\n    const CollapsePackageComponent = (props) => {\n        return (\n           <React.Fragment >\n                <TableRow className={classes.packageNameRow}>\n                    <StyledTableCell  >\n                        <Typography className={classes.heading}>File Name</Typography>\n                    </StyledTableCell>\n                    <StyledTableCell  colSpan={3} >\n                        <Typography className={classes.secondaryHeading}>{filename}</Typography>\n                    </StyledTableCell>  \n                </TableRow>\n                <TableRow className={classes.packageNameRow}>\n                    <StyledTableCell  >\n                        <Typography className={classes.heading}>File Size</Typography>\n                    </StyledTableCell>\n                    <StyledTableCell  colSpan={3} >\n                        <Typography className={classes.secondaryHeading}>{filesize}</Typography>\n                    </StyledTableCell>                              \n                </TableRow>\n                <TableRow className={classes.packageNameRow}>\n                    <StyledTableCell  >\n                        <Typography className={classes.heading}>SHA256</Typography>\n                    </StyledTableCell>\n                    <StyledTableCell  colSpan={3} >\n                        <Typography className={classes.secondaryHeading}>{sha256}</Typography>\n                    </StyledTableCell>                              \n                </TableRow>\n                <TableRow className={classes.packageNameRow}>\n                    <StyledTableCell  >\n                        <Typography className={classes.heading}>MD5</Typography>\n                    </StyledTableCell>\n                    <StyledTableCell  colSpan={3} >\n                        <Typography className={classes.secondaryHeading}>{md5}</Typography>\n                    </StyledTableCell>                              \n                </TableRow>\n\n                {getMirrors(mirror)}\n            </React.Fragment>    \n        )\n    }\n\n    return ( \n       <>\n            <TableRow>\n                <StyledTableCell colSpan={4} className={classes.packageNameRow}>\n                    <Typography \n                        onClick={() => setOpen(!open)} \n                        color={hasFailedStatus(packages)?'secondary':'primary'} \n                        className={classes.packageName}>\n                    {filename } \n                    {/* <PTSSignifier filename={filename} colorStatus={colorStatus}/> */}\n                    </Typography>\n                </StyledTableCell>\n            </TableRow> \n \n            <Collapse \n                in={open} \n                timeout=\"auto\" \n                component={() => CollapsePackageComponent(props)}\n                unmountOnExit >\n            </Collapse> \n        </>\n       \n    )\n}\n\n const packageStyles = withStyles(useStyles)(PTSPackages);\n export { packageStyles };\n\nexport default PTSPackages;\n","import * as Constants from './Constants';\n\nconst semver= require('semver'); // semantic versioner\n\nfunction mapData(data) {\n    let testProfile = null;\n    let dataMap = {\n        failed : [],\n        checksum : [],\n        redirect : [],\n        download : [],\n        timeOut : [],\n        notTested : []\n    };\n\n    if (data && data.length>0 ) {\n        testProfile = data.map((profile) => {\n            let checksumError, redirectError, downloadError, timeError, failError, notTested=null;\n            let profileColor = [];\n                \n            profile.packages.map((packs) => {\n                let packageColor = [];\n                \n                packs.mirror.map(mirror => {\n                    let mirrorColor = [];\n\n                    if (mirror.status === Constants.JSON_FAILED) {\n                        mirrorColor = [Constants.COLOR_FAIL];\n                        failError = true;\n                        let data = mirror.failures;\n\n                        // If the download time is 0, the operation timed out. The checksums produced will be incorrect.\n                         if (\"download-time\" in mirror &&\n                             mirror['download-time'] === Constants.JSON_TIMED_OUT) {\n                                mirrorColor=[...mirrorColor, Constants.COLOR_TIMEOUT];\n                                timeError = true;\n                         } else {\n                            // Map the Checksums Failures\n                            if (data[Constants.JSON_MD5] !== undefined ) {\n                                mirrorColor=[...mirrorColor, Constants.COLOR_MD5];\n                                checksumError = true;\n                            }\n                            if (data[Constants.JSON_SHA256] !== undefined ) {\n                                mirrorColor=[...mirrorColor, Constants.COLOR_SHA];\n                                checksumError = true;\n                            }\n\n                            // Map the Redirects Failures\n                            if (data[Constants.JSON_HTTP_CODE] !== undefined  && data[Constants.JSON_HTTP_CODE].toString() === \"301\") {\n                                mirrorColor=[...mirrorColor, Constants.COLOR_301];\n                                redirectError = true;\n                            }\n\n                            if (data[Constants.JSON_HTTP_CODE] !== undefined  && data[Constants.JSON_HTTP_CODE].toString() === \"302\") {\n                                mirrorColor=[...mirrorColor, Constants.COLOR_302];\n                                redirectError = true;\n                            }\n                            \n                            //  HTTP 404 failure\n                            if (data[Constants.JSON_HTTP_CODE] !== undefined  && data[Constants.JSON_HTTP_CODE].toString() === \"404\") {\n                                mirrorColor=[...mirrorColor, Constants.COLOR_404];\n                                downloadError = true;\n                            }\n\n                            if (data[Constants.JSON_HTTP_CODE] !== undefined  && data[Constants.JSON_HTTP_CODE].toString() === \"0\") {\n                                mirrorColor=[...mirrorColor, Constants.COLOR_HTTP_0];\n                                downloadError = true;\n                            }\n\n                            // Other HTTP failures\n                            if (data[Constants.JSON_HTTP_CODE] !== undefined  && !(\n                              data[Constants.JSON_HTTP_CODE].toString() === \"0\" ||\n                              data[Constants.JSON_HTTP_CODE].toString() === \"404\" ||\n                              data[Constants.JSON_HTTP_CODE].toString() === \"301\" ||\n                              data[Constants.JSON_HTTP_CODE].toString() === \"302\")) {\n                                mirrorColor=[...mirrorColor, Constants.COLOR_HTTP];\n                                downloadError = true;\n                            }\n\n                        }                                             \n                    } else {\n\n                        // Not Tested\n                        if (mirror.status === Constants.JSON_NOT_TESTED) {\n                            mirrorColor = [Constants.COLOR_NOT_TESTED];\n                            notTested = true;\n                        } else {\n                            mirrorColor = [Constants.COLOR_PASS];\n                        }\n                    }\n\n                    mirror.colorStatus = mirrorColor;\n                    packageColor = [...packageColor, ...mirrorColor]\n                    return mirror;\n                })\n\n                packs.colorStatus = Array.from( new Set(packageColor) );\n                profileColor = [...profileColor, ...packageColor]\n                return packs;   \n            })\n\n            profile.colorStatus = Array.from( new Set(profileColor) );\n\n            if (notTested)\n                dataMap.notTested.push(profile);\n            if (failError)\n                dataMap.failed.push(profile);\n            if (checksumError)\n                dataMap.checksum.push(profile);\n            if (redirectError)\n                dataMap.redirect.push(profile);\n            if (downloadError)\n                dataMap.download.push(profile);\n            if (timeError)\n                dataMap.timeOut.push(profile);\n\n            // if (failError || checksumError || redirectError || downloadError || timeError || notTested)\n            //     console.log(\"data map\", dataMap);\n\n            return profile;\n       \n        })   \n    } \n    \n    return {testProfile, dataMap};\n}\n\n/**\n * Determines if the test has failed. \n * A failure of JSON_NOT_TESTED means that no PTS Data is available to display so set the notTested flag.\n * @param {*} packages all the data\n */\nconst getColor = (test) => {\n    let col = Constants.COLOR_PASS;\n\n    if (test.includes(Constants.COLOR_FAIL))\n        col = Constants.COLOR_FAIL;\n    if (!test.includes(Constants.COLOR_PASS) && !test.includes(Constants.COLOR_NOT_TESTED))\n        col = Constants.COLOR_FATAL;\n\n    // If the test is a 301 redirect, it's probably not a failure so mark as a warning\n    // however is one of the mirrors contains another failure, mark it as a fail\n    if (test.includes(Constants.COLOR_301) && test.length === 2) {\n        col =  Constants.COLOR_WARNING;\n    } else if (test.includes(Constants.COLOR_301) && test.length > 2){\n        let otherFails = false;\n        if (test.includes(Constants.COLOR_PASS)) {  \n            otherFails = test.some(c => {                \n                if ( c > 2 && c !== Constants.COLOR_301)\n                    return true;  \n                else\n                    return false;\n            })\n            col = (otherFails) ? Constants.COLOR_FAIL : Constants.COLOR_PASS;\n        } else {\n            col = Constants.COLOR_WARNING;\n        }\n    }\n\n    return col; \n};\n\nconst hasFailedStatus = (packages) => {\n    return packages.some(pack => \n        pack.mirror.some(mirror => mirror.status === Constants.JSON_FAILED)   \n)};\n/**\n * \n * In the case of no download.xml file, the test status will be NOT_TESTED.\n * This does not consitute a failure and also there is not point in getting child components.\n * @param {*} packages all the data\n */\nfunction notTestedPackage(packages) {\n    return packages.some(pack => \n        pack.mirror.some(mirror => \n                (mirror.status === Constants.JSON_NOT_TESTED)                            \n        ) \n    \n)};\n\n\n/**\n * Returns subset of profiles that matches the searchCriteria defined by the ProfileName text field.\n * @param {*} data all the data\n * @param {*} value the value to search for within @data\n */\nconst getSearchData = (data, value) => {\n    let results = null;\n\n    if (data && data.length > 0) {\n        results = data.filter(profile => {\n            return (profile['profile-name'].includes(value));\n        })\n    }\n    return results;\n}\n\n\n\n/**\n * Splits the profile name into the test profile name\n * @param {*} profileName   profile name such as pts/apache-1.2.1\n * @return {name, version}  {pts/apache, 1.2.1}\n */\nfunction getProfileNameAndVersion(profileName) {\n    const version_regex = /-\\d.\\d.*/g;\n    const name_regex = /.*-/g;\n\n    let name_match = profileName.match(name_regex)[0];  //match returns array\n    let name = name_match.slice(0, name_match.length-1);\n    \n    let version_match = profileName.match(version_regex)[0];\n    let version = version_match.slice(1);\n\n    return {profileName, name, version};\n}\n\n/**\n * Returns the latest version of each test profile\n * @param {*} data All test profiles\n * @return array [{profileName, name, version}] {pts/apache-1.2.1, pts/apache, 1.2.1} latest version of each profile \n */\nfunction getLatestVersion(data) {\n    let profiles = [];\n\n    if (data && data.length>0 ) {\n        data.forEach((profile) => {\n            let profileName = profile['profile-name'];\n            let profileDetails = getProfileNameAndVersion(profileName);\n            profile.version=profileDetails.version;\n            profile.name=profileDetails.name;\n\n            // Get the index of the profile name\n            let idx = profiles.findIndex((curr) => curr.name === profileDetails.name);\n\n            // If the profile name d.n.e add it to the latest list\n            if (idx === -1) {    \n                profile.versions = [profile.version];\n                profiles.push(profile);\n            } else {\n                // If the profile does exist, store the lastest version\n                if (semver.gt(profileDetails.version, profiles[idx].version)) {\n                    profile.versions = [...profiles[idx].versions, profile.version];\n                    profiles[idx] = profile;\n                } \n            }\n         })\n    }\n    return profiles;\n}\n\nexport {mapData, getColor, getSearchData,  notTestedPackage, hasFailedStatus, getLatestVersion}\n\n","import React from 'react';\nimport Typography from '@material-ui/core/Typography';\nimport Collapse from \"@material-ui/core/Collapse\";\nimport TableRow from '@material-ui/core/TableRow';\n\nimport PTSPackages from './PTSPackages';\nimport PTSSignifier from './PTSSignifier';\nimport * as Constants from '../Constants';\nimport {theme} from './theme';\n\n\nimport StyledTableCell from './StyledTableCell';\nimport {notTestedPackage, getColor} from \"../processData\";\n\nimport useStyles from \"./styles\";\n\nconst getProfileColor = (profile, translate=true) => {\n    let color = profile;\n    if (translate)\n        color = getColor(profile);\n\n    let returnCol;\n    switch (color) {\n        case Constants.COLOR_PASS:\n            returnCol = theme.palette.primary.main;\n            break;\n        case Constants.COLOR_WARNING:\n            returnCol = theme.palette.warning.dark;\n            break;\n        case Constants.COLOR_FAIL:\n            returnCol = theme.palette.secondary.main;\n            break;\n        case Constants.COLOR_FATAL:\n            returnCol = theme.palette.fatal.main;\n            break;\n        default:\n            returnCol = 'secondary';\n    }\n    return returnCol;\n}\n\n\nconst PTSProfile = props => {\n    const profile=props.data;\n    const [open, setOpen] = React.useState(false);  // hold state for the profile name collapse component \n    const classes = useStyles();\n\n    // Get the data for each package. A package that is marked as Not Tested has no further\n    // data to display.\n    const getPackages = (packages) => {      \n        if (packages && packages.length>0 ) {\n          return packages.map((pack, pKey) =>  {\n            if ( notTestedPackage(packages) )  // yes packages. \n                return (\n                    <TableRow key={pKey}>\n                        <StyledTableCell key={pKey} colSpan={4}>\n                            <Typography key={pKey} \n                                className={classes.secondaryHeading} \n                                style={{marginLeft:\"1.4em\"}}>\n                                Not Tested. download.xml file did not exist.\n                            </Typography>\n                        </StyledTableCell>\n                    </TableRow>\n                )\n            else\n                return (<PTSPackages key={pKey} data={pack}/> );\n          })      \n        }\n      }\n      \n    return (\n        <>\n            <TableRow className={classes.profileNameRow}>\n                <StyledTableCell colSpan={4}>\n                    <Typography \n                        onClick={() => setOpen(!open)} \n                        className={classes.profileName}\n                        style={{color:getProfileColor(profile.colorStatus)}}\n                        >\n                        {profile['profile-name']}\n                        <PTSSignifier colorStatus={props.data.colorStatus}/>\n                    </Typography>\n                </StyledTableCell>\n            </TableRow> \n                  \n            <Collapse \n                in={open} \n                timeout=\"auto\" \n                component={() => getPackages(profile.packages)}\n                unmountOnExit >    \n            </Collapse> \n        </>               \n     )\n}\n\nexport default PTSProfile;\nexport {getProfileColor};","import React from 'react';\nimport PTSProfile from './PTSProfile';\n\n/**\n * Displays the results based on the filters(checkboxes) selected.\n * @param props the results to be displayed. Note the filters have already been applied.\n */\nfunction PTSResults(props) {\n  const data = props.results;\n  \n  const getResults = (data) => {  \n    if (data && data.length>0 ) {\n      return data.map((profile, tpKey) =>  \n         (<PTSProfile key={tpKey} data={profile}/> )\n      )\n    }\n  }\n\n  return ( \n    <React.Fragment>\n      {getResults(data)}\n    </React.Fragment>\n  );\n}\n\nexport default PTSResults;","import React, {useState} from 'react';\nimport {ThemeProvider} from '@material-ui/core/styles';\nimport TextField from '@material-ui/core/TextField';\nimport Container from '@material-ui/core/Container'; //Defines the size of page\nimport Toolbar from '@material-ui/core/Toolbar'; \nimport AppBar from '@material-ui/core/AppBar'; \nimport Divider from '@material-ui/core/Divider';\nimport Typography from '@material-ui/core/Typography';\nimport Grid from '@material-ui/core/Grid';\nimport InputAdornment from '@material-ui/core/InputAdornment';\nimport SearchIcon from '@material-ui/icons/Search';\nimport ClearIcon from '@material-ui/icons/Clear';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\n\n\nimport 'fontsource-roboto';\n\nimport Checkboxes, {useCheckboxes} from './Checkboxes';\nimport PTSHelp from './PTSHelp';\nimport Legend from './Legend';\nimport PTSResults from './PTSResults';\nimport * as Constants from '../Constants';\nimport {theme} from './theme';\nimport \"./styles.css\";\nimport useStyles from \"./styles\";\nimport StyledTableCell from './StyledTableCell';\nimport { getSearchData } from '../processData';\n\n\nexport function FilterForm(props) {\n    const { lastDownload } = props;\n    const [searchValue, setSearchValue] = useState(\"\"); // value in the profileName text field\n    const checkboxes = useCheckboxes();                 // filter to determine which results to display\n    const classes = useStyles();                        \n\n    const [legend, setLegend] = React.useState(false);\n    \n    // Display/Hide Legend based on the legend checkbox value\n    const handleLegend = (event) => {\n        setLegend(event.target.checked);\n    };\n\n    // Clear the profile name text field\n      const handleClearSearch = (event) => {\n        setSearchValue(\"\");\n        event.preventDefault();\n      };\n\n    // display the results on the page\n    const handleDisplay = (event) => {\n        event.preventDefault();\n    }\n\n    /**\n     * Get the data to display. \n     * The default is all data as per the  JSON file. This method filters and returns the subset of all data\n     * based on the checkboxes selected.\n     * The checkboxes work as an AND when the profile name has been populated.\n     * @param {*} data all the json results\n     * @return results all data that matches the filter AND profile name search criteria.\n     * \n     */\n    const getData = (allData) => {\n        let {testProfile : data, dataMap}= allData.all;\n        let {testProfile : latestData, dataMap : latestDataMap}= allData.latest;\n        \n        // determine which checkboxes have been selected as these will be the filters for the search\n        const filters = checkboxes.checkboxes.filter((checks) => checks.checked === true).map((checkbox) => checkbox.name);\n        \n        // Set the default to display all results\n        let results = data;\n\n        // If no checkboxes have been selected, display 0 results\n        if (filters && filters.length === 0 ) {\n            results = null;\n        }\n\n        // Top Level Searches either ALL or LATEST versions of a test profile\n        if (filters.includes(Constants.ALL.name)) \n            results = data;\n\n        if (filters.includes(Constants.LATEST.name)) {\n            results = latestData;\n            dataMap = latestDataMap;\n        }\n\n        // Secondary Searches use the results from the top level search\n        if (filters.includes(Constants.FAILED.name) && filters.includes(Constants.CHECKSUM.name)) {\n            //let newFilter = getAllFilters(Constants.CHECKSUM, filters); //for future dev if want to drill down to either MD5 or SHA\n            results = dataMap.checksum;\n        } else if (filters.includes(Constants.FAILED.name) && filters.includes(Constants.DOWNLOAD.name)) {\n            results = dataMap.download;\n        } else if (filters.includes(Constants.FAILED.name) && filters.includes(Constants.REDIRECTS.name)) {\n            results = dataMap.redirect;\n        } else if (filters.includes(Constants.FAILED.name) && filters.includes(Constants.NONE.name)) {\n            results = dataMap.failed;        \n        } else if (filters.includes(Constants.NOT_TESTED.name)) {\n            results = dataMap.notTested;\n        } else if (filters.length <=2 && filters.includes(Constants.FAILED.name) ) {\n            results = dataMap.failed;\n        }\n\n         // If a search value has been defined in the Test Profile text field, get the subset of data that matches the search criteria\n        // and further reduce the data based on the filters selected.\n        if ( searchValue !== \"\" ) {\n            results = getSearchData(results, searchValue);\n        }\n        \n        return results;\n    }\n\n    // **** Keep for future development if you want to add specific failed checkboxes ie MD5s or SHAs\n    // function getAllFilters(parent, filters) {\n    //     // if no children are in the filters then add all the children\n    //     let children = getChildrensName(parent.children);\n    //     let childFilters = children.some(child => filters.includes(child));\n\n    //     // If a child filter has been selected limit search to selection, otherwise\n    //     // search for all child criteria.\n    //     if (!(childFilters))\n    //         return [...filters, ...children];\n    //     else\n    //         return [...filters]\n    // }\n\n\n    let results = getData(props.data);\n\n    return(\n        <ThemeProvider theme={theme}>\n            <Container maxWidth=\"lg\" className={classes.root}>\n                <React.Fragment>\n                    <form onSubmit={(e) => handleDisplay(e)}>\n                        <div className={classes.root} >\n                            { useMediaQuery(theme.breakpoints.up('md')) ?\n                                <AppBar>\n                                    <Toolbar className={classes.toolbar}>\n                                        <Grid justify=\"space-between\"\n                                            container>\n                                            <Grid item>\n                                                <Typography\n                                                    variant=\"h2\"\n                                                >Test Profile Download Status\n                                                </Typography>\n                                                {lastDownload ?\n                                                <Typography\n                                                >Last Download: {lastDownload}\n                                                </Typography> : null}\n                                            </Grid>\n                                            <Grid item>\n                                                <PTSHelp/>\n                                            </Grid>\n                                        </Grid>\n                                    </Toolbar>\n                                </AppBar> \n                            :\n                            <AppBar>\n                                <Toolbar className={classes.toolbar_sm}>\n                                    <Typography>Test Profile Results</Typography>\n                                </Toolbar>\n                            </AppBar> }\n                        </div>\n                        {/* <div className={classes.root}> */}\n                        <Grid  container>\n                            <Grid className={classes.toolbar_margins} item xs={12}>                                 \n                                <Grid container item xs={12}>\n\n                                    <Checkboxes {...checkboxes} displayLegend={legend} />\n\n                                    <Grid item xs={12} md={3}>\n                                        <TextField\n                                            className={classes.filter_margins}\n                                            value={searchValue}\n                                            label=\"Profile Name\"\n                                            variant=\"standard\"\n                                            size=\"small\"\n                                            color=\"primary\"\n                                            // style={{marginTop:'0.5em'}}\n                                            InputLabelProps={{shrink: true}}\n                                            InputProps={{\n                                                startAdornment: <InputAdornment position=\"start\"><SearchIcon /></InputAdornment>,\n                                                endAdornment: <InputAdornment position=\"end\"><ClearIcon style={{cursor:'default'}} onClick={handleClearSearch}/></InputAdornment>,\n                                                // disableUnderline: true,\n                                                className: classes.searchField\n\n                                            }}\n                                            onChange={(e) => setSearchValue(e.target.value)}   \n                                        />      \n                                    </Grid>\n                                    <Grid item xs={12} md={5}>\n                                        <FormControlLabel\n                                                control={\n                                                    <Checkbox\n                                                        checked={legend.checked}\n                                                        onChange={handleLegend}\n                                                        name=\"legend\"\n                                                        color=\"primary\"\n                                                    />\n                                                }\n                                                label=\"Display Legend\"\n                                            />\n\n                                             <Grid item container direction=\"column\" >\n                                                <Grid item >  \n                                                    {(legend ? <Legend />: null)}\n                                                </Grid>\n                                            </Grid>\n                                    </Grid>                          \n                                </Grid>                       \n                            </Grid>\n                        </Grid>\n                        <Divider style={{marginTop: \"1em\"}}/>\n                    </form>\n\n                    {results ? \n                        (<TableContainer style={{maxHeight:1000}}>\n                            <Table stickyHeader className={classes.borders}>\n                                <TableHead>\n                                    <TableRow className={classes.tableHeader}>\n                                        <StyledTableCell colSpan={4}><Typography className={classes.resultsRow} color='primary'> Results: {results.length}</Typography></StyledTableCell>\n                                    </TableRow>\n                                </TableHead>\n                                <TableBody className={classes.borders}>\n                                    <PTSResults results={results} />\n                                </TableBody>\n                            </Table> \n                        </TableContainer>) :\n                        (<Typography>\n                            No Test Profiles match the search criteria\n                        </Typography>)\n                    }\n\n                </React.Fragment>\n            </Container>\n        </ThemeProvider>\n    )\n}\n","import './App.css';\nimport axios from 'axios';\nimport React,{useState, useEffect} from 'react';\nimport { FilterForm } from './components/FilterForm';\nimport { LinearProgress } from '@material-ui/core';\nimport useStyles from './components/styles';\nimport {mapData, getLatestVersion} from '../src/processData.js';\n\nfunction App() {\n  const apiEndPoint = \"check-tests-results.json\";   \n\n  const classes = useStyles();\n  const [data,setData]=useState([]);\n  const [loading, setLoading] = useState(true);\n  const [lastModified, setLastModified] = useState(null);\n\n\n  // UseEffect runs when component mounts and also when it updates\n  // Since we are changing the state of data, it will run again and again unless we set the second arg to [].\n  // This tells the hook that we are not listening for any changes to data this preventing an infinite loop.\n  useEffect(()=> {\n     const getData = async () => {\n        const result = await axios(apiEndPoint);\n        setLastModified(result.headers['last-modified']);\n\n        // Map all versions of a profile\n        let mappedData = mapData(result.data);\n\n        // Map the latest version of each profile\n        let latestVersion = getLatestVersion(result.data);\n        let mappedLatestData = mapData(latestVersion);\n\n        let map = {\n          all : mappedData,\n          latest : mappedLatestData\n        };\n        \n        setData(map);\n        setLoading(false);\n    }\n    \n    getData();\n\n  },[])\n\n  return (\n    <div className={classes.root}>\n      {loading ? <LinearProgress  className={classes.progressBar}/> : <FilterForm data={data} lastDownload={lastModified}/> } \n    </div>\n  );\n\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n//reportWebVitals();\n"],"sourceRoot":""}