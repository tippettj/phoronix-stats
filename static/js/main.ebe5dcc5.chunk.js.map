{"version":3,"sources":["Constants.js","components/styles.js","components/Checkboxes.js","components/theme.js","components/PTSHelp.js","components/StyledTableCell.js","components/PTSFailures.js","components/PTSMirrors.js","components/PTSPackages.js","processData.js","components/PTSProfile.js","components/PTSResults.js","components/FilterForm.js","App.js","index.js"],"names":["ALL","FAILED","MD5","SHA256","REDIRECT","NOT_TESTED","TIMED_OUT","JSON_FAILED","JSON_PASSED","JSON_NOT_TESTED","useStyles","makeStyles","theme","root","progressBar","color","palette","secondary","main","position","marginTop","button","background","border","borderRadius","padding","fontSize","toolbar","borders","profileNameRow","backgroundImage","profileName","fontWeight","typography","fontWeightBold","cursor","packageName","marginLeft","fontWeightMedium","borderTopColor","borderTopWidth","borderTopStyle","packageNameRow","backgroundColor","mirrorRow","failureRow","heading","secondaryHeading","text","mirrorHeading","mirrorSecondaryHeading","mirrorDataHeading","width","failureHeading","searchField","checkboxes","checkboxList","name","Constants","checked","useCheckboxes","defaultCheckboxes","useState","map","box","idx","setCheckboxes","setCheckbox","index","filter","i","t","manageState","newcheckboxes","createCheckbox","classes","FormControlLabel","control","Checkbox","className","style","onChange","e","target","label","Checkboxes","Fragment","Grid","item","xs","sm","md","lg","container","direction","createMuiTheme","h2","marginBottom","primary","PTSHelp","React","anchorEl","setAnchorEl","open","Boolean","id","undefined","IconButton","aria-describedby","onClick","event","currentTarget","Popover","onClose","anchorOrigin","vertical","horizontal","transformOrigin","Typography","variant","Box","display","component","ml","StyledTableCell","withStyles","head","common","white","body","borderWidth","borderStyle","borderColor","TableCell","PTSFailures","props","Object","entries","failed","key","value","keyFormatted","replace","startCase","match","toUpper","TableRow","rowSpan","length","verticalAlign","getFailures","PTSMirrors","openMirror","setOpenMirror","useTheme","getFormattedCell","toLowerCase","str","slice","lastIndexOf","Link","href","rel","window","innerHTML","preventDefault","handleClick","data","status","colSpan","url","Collapse","in","timeout","containsFailures","result","failures","push","CollapseMirrorComponent","unmountOnExit","PTSPackages","packages","setOpen","identifier","filename","filesize","sha256","md5","mirror","getMirrors","mir","some","hasFailedStatus","getSpecificFailures","fData","searchFilters","failedData","includes","PTSProfile","profile","getPackages","pack","pKey","notTestedPackage","PTSResults","results","tpKey","getResults","FilterForm","searchValue","setSearchValue","ThemeProvider","Container","maxWidth","onSubmit","AppBar","Toolbar","justify","alignItems","spacing","TextField","size","InputLabelProps","shrink","InputProps","startAdornment","InputAdornment","disableUnderline","Button","startIcon","Divider","TableContainer","Table","TableBody","allData","filters","checks","checkbox","getSearchData","packs","getFailedData","httpCode","toString","getRedirectData","getNotTestedData","mirrorFailure","getTimedOutData","getData","App","setData","loading","setLoading","useEffect","a","axios","LinearProgress","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.ebe5dcc5.chunk.js","sourcesContent":["// Checkbox names and filters\nexport const ALL = \"All Tests\"\nexport const FAILED = \"All Fails\"\nexport const MD5 = \"MD5 Fails\"\nexport const SHA256 = \"SHA256 Fails\"\nexport const REDIRECT = \"Redirects\"\nexport const NOT_TESTED = \"Not Tested\"\nexport const TIMED_OUT = \"Timed Out\"\n\n\n\n\n// JSON\nexport const JSON_FAILED = \"Failed\";    // The status of the test is failed\nexport const JSON_FAILURES = \"Failures\"; // This list of actual failures\nexport const JSON_PASSED = \"Passed\";\nexport const JSON_MD5 = \"md5\";\nexport const JSON_SHA256 = \"sha256\";\nexport const JSON_NOT_TESTED=\"Not Tested\";\nexport const JSON_HTTP_CODE=\"HTTP Code\";\nexport const JSON_TIMED_OUT=0;\nexport const JSON_ERROR=\"error\";","import { makeStyles } from '@material-ui/core/styles';\n\nexport const useStyles = makeStyles((theme) => ({\n   \n    // Container\n    root: {\n      // flexGrow: 1,\n      // alignItems: \"center\",\n      // justifyContent: \"center\",\n    },\n\n    progressBar: {\n      color: theme.palette.secondary.main,\n      position: \"relative\",\n      marginTop: \"20%\"\n    },\n\n    // Clear Button\n    button: {\n        background: 'linear-gradient(45deg, #285F80 29%, #333333 81% )',\n        border: 0,\n        borderRadius: 15,\n        color: '#FFFFFF', // white\n        padding: '5px 30px',\n        // marginRight: '20px',\n        fontSize: 12,\n        marginTop: \"0.5em\"\n    },\n    \n    toolbar: {\n      //background: 'linear-gradient(45deg, #285F80 29%, rgba(51,51,51,95) 91% )',\n      background: \"#285F80\",\n      padding: '1em',\n    },\n\n    // keep for debugging\n    borders: {\n        // borderWidth: 1,\n        // borderColor: \"red\",\n        // borderStyle: \"solid\", \n    },\n\n    // Rows containing the profile Name\n    profileNameRow: {\n      //backgroundColor: \"#CCD1D1\", //light grey\n      backgroundImage: 'linear-gradient(90deg, rgba(227,224,224, 5) 0%, rgba(126,159,178,1) 98%)',\n    },\n\n    // Profile Name titles\n    profileName:\n    {\n      padding: \"0.5rem\",\n      fontWeight: theme.typography.fontWeightBold,\n      '&:hover' : {\n        fontWeight:theme.typography.fontWeightBold,\n        cursor: \"pointer\",\n      },\n    },\n\n    // Rows containing package Names title\n    packageName: {\n      marginLeft: \"2em\",\n      fontWeight: theme.typography.fontWeightMedium,\n      '&:hover' : {\n        fontWeight: theme.typography.fontWeightBold,\n        cursor: \"pointer\",\n      },\n      borderTopColor: \"black\",\n      borderTopWidth: \"2px\",\n      borderTopStyle: \"solid\",\n    },\n\n    // Rows containing package Names Details FileName/FileSize\n    packageNameRow: {\n      backgroundColor: \"#d6dada\",  \n    },\n\n    // Rows containing mirror details ie Status/Duplicate/Failures\n    mirrorRow: {\n      backgroundColor: \"#d6dada\",\n    },\n\n    // Rows containing failure details ie MD5/SHA246\n    failureRow: {\n      backgroundColor: \"#d6dada\",\n    },\n\n    // Heading throughout Table, usually keys in JSON File\n    heading: {\n         color: \"#000000\", //black\n         fontWeight:theme.typography.fontWeightMedium,\n         marginLeft: \"3em\"\n    },\n\n    // Headings throughout table, usually values from JSON file\n    secondaryHeading: {\n         color: theme.palette.text.secondary\n    },\n\n    // Heading under collapsed Mirror ie Mirror 1\n    mirrorHeading: {\n      marginLeft: \"3em\",\n      '&:hover' : {\n        fontWeight:theme.typography.fontWeightBold,\n        cursor: \"pointer\",\n      },\n    },\n\n    // Heading under collapsed Mirror ie the url reflecting the mirror\n    mirrorSecondaryHeading: {\n      '&:hover' : {\n        fontWeight:theme.typography.fontWeightBold,\n        cursor: \"pointer\",\n      },\n      // textAlign: \"inherit\", \n    },\n\n    // Headings for the mirror data. Usually keys like Status/Duplicate/Failures\n    mirrorDataHeading: {\n      color: \"#000000\", //black\n      fontWeight:theme.typography.fontWeightMedium,\n      width: \"130px\",\n    },\n\n    // Headings for the failures\n    failureHeading: {\n      color: \"#000000\", //black\n      fontWeight:theme.typography.fontWeightMedium,\n },\n    //TextField details\n    searchField: {\n      //backgroundColor: \"#d7d8da\", // a bit darker then #d3d5d8\n      backgroundColor: \"#d3d5d8\",\n      marginTop:\"0.5em\",\n    },\n\n    // disable the circle that appears when hovering over a checkbox\n    checkboxes: {\n      '&:hover': {\n        backgroundColor: \"transparent\"\n      },  \n    },\n    \n  }));\n\n  export default useStyles;\n","import React, { useState } from 'react';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport Grid from '@material-ui/core/Grid';\nimport { FormControlLabel } from '@material-ui/core';\n\nimport * as Constants from \"../Constants\";\nimport useStyles from \"./styles\";\n\n// List of checkboxes that can be applied to the JSON data to extract results\nconst checkboxList = [\n    {name: Constants.ALL, checked: true}, \n    {name: Constants.FAILED, checked: false},\n    {name: Constants.MD5, checked: false},\n    {name: Constants.SHA256, checked: false},\n    {name: Constants.REDIRECT, checked: false}, \n    {name: Constants.NOT_TESTED, checked: false},\n    {name: Constants.TIMED_OUT, checked: false}  \n\n];\n\n// Takes the filter list and sets default properties to create checkboxes\nconst getDefaultCheckboxes = () =>\n  checkboxList.map((box, idx) => ({\n    name: box.name,\n    checked: box.checked,\n    idx,\n}));\n\n/**\n * Determines the state of the various checkboxes defined in the filterList.\n *  The combination of these checkboxes will be used to determing the checkboxes to apply to the JSON values\n * @param defaultCheckboxes \n * @return all the checkboxes and their current state\n */\nexport function useCheckboxes(defaultCheckboxes) {\n  const [checkboxes, setCheckboxes] = useState(\n    defaultCheckboxes || getDefaultCheckboxes(),\n  );\n\n\n  /**\n   * Determines the logic of the checkboxes\n   * @param index   index of the checkbox as defined in the checkboxList\n   * @param checked boolean\n   */ \n  function manageState(index,checked) {\n    const all = 0;\n    const allFailed = 1;\n    const md5Failed = 2;\n    const shaFailed = 3;\n    const redirects = 4;\n    const notTested = 5;\n    const timedOut = 6;\n\n    // All selected -> Turn off all other filters\n    if (index === all && checked === true) {\n      checkboxes.filter( i => i.name !== Constants.ALL ? i : null ).map(t => t.checked = false);\n    }\n\n    if (index === allFailed) {\n      checkboxes.filter( i => i.name !== Constants.FAILED ? i : null ).map(t => t.checked = false);\n    }\n\n    if (index === redirects) {\n      checkboxes.filter( i => i.name !== Constants.REDIRECT ? i : null ).map(t => t.checked = false);\n    }\n\n    if (index === notTested) {\n      checkboxes.filter( i => i.name !== Constants.NOT_TESTED ? i : null ).map(t => t.checked = false);\n    }\n\n    if (index === timedOut) {\n      checkboxes.filter( i => i.name !== Constants.TIMED_OUT ? i : null ).map(t => t.checked = false);\n    }\n\n    // md5 and sha256 can be selected at the same time --> adds up to all Failures\n    if (index === md5Failed || index === shaFailed) {\n      checkboxes[all].checked = false;\n      checkboxes[allFailed].checked = false;\n      checkboxes[redirects].checked = false;\n      checkboxes[notTested].checked = false;\n      checkboxes[timedOut].checked = false;\n    }\n  }\n\n  // Sets the state of a specific checkbox\n  function setCheckbox(index, checked) {\n    manageState(index,checked);\n    const newcheckboxes = [...checkboxes];\n    newcheckboxes[index].checked = checked;\n    setCheckboxes(newcheckboxes);\n  }\n\n  // same as a standard use hook\n  return {\n    checkboxes,\n    setCheckbox,\n  };\n}\n\nconst createCheckbox = (classes, checkboxes, setCheckbox, index) => {\n  return (\n    <FormControlLabel \n      control=\n        {<Checkbox\n          className={classes.checkboxes}\n          style={{'&:hover': {backgroundColor: \"transparent\"}}}\n          checked={checkboxes[index].checked}\n          onChange={e => {setCheckbox(checkboxes[index].idx, e.target.checked)}}\n        />}\n      label={checkboxes[index].name}\n    />\n  )\n}\n\nfunction Checkboxes({ checkboxes, setCheckbox}) {\n  const classes =useStyles();\n  return (\n    <React.Fragment>\n        <Grid item xs={12} sm={3} md={2} lg={2}>{createCheckbox(classes, checkboxes, setCheckbox, 0)}</Grid>\n        <Grid item xs={12} sm={3} md={3} lg={2}>\n          <Grid container direction=\"column\" >\n            <Grid item>{createCheckbox(classes, checkboxes, setCheckbox, 1)}</Grid>\n            <Grid item>{createCheckbox(classes, checkboxes, setCheckbox, 2)}</Grid>\n            <Grid item>{createCheckbox(classes, checkboxes, setCheckbox, 3)}</Grid>\n          </Grid>\n        </Grid>\n        <Grid item xs={12} sm={3} md={3} lg={2}>\n          <Grid container direction=\"column\" >\n            <Grid item >{createCheckbox(classes, checkboxes, setCheckbox, 4)}</Grid>\n            <Grid item >{createCheckbox(classes, checkboxes, setCheckbox, 5)}</Grid>\n            <Grid item >{createCheckbox(classes, checkboxes, setCheckbox, 6)}</Grid>\n          </Grid>\n        </Grid>\n    </React.Fragment>\n  );\n}\n\nexport default Checkboxes;\n\n","import {createMuiTheme} from '@material-ui/core/styles';\n\nexport const theme = createMuiTheme({\n    typography: {\n        h2: {\n            fontSize:36,\n            marginBottom:15,\n        },\n    },\n    palette: {\n        primary: {\n            main: '#285F80', \n        },\n        secondary: {\n            main: '#d32f2f', \n        },\n        text: {\n            secondary: \"#424242\",\n        }\n\n    },\n    // overrides: {\n    //     MuiContainer: {\n    //         root : {\n    //           marginLeft: \"10px\",\n    //         }\n    //     }\n    // }\n});\n\nexport default theme;","import React from 'react';\nimport Popover from '@material-ui/core/Popover';\nimport Typography from '@material-ui/core/Typography';\nimport Box from '@material-ui/core/Box';\nimport HelpIcon from '@material-ui/icons/Help';\nimport IconButton from '@material-ui/core/IconButton';\nimport {theme} from './theme';\n\n\nexport default function PTSHelp() {\n  const [anchorEl, setAnchorEl] = React.useState(null);\n\n  const handleClick = (event) => {\n    setAnchorEl(event.currentTarget);\n  };\n\n  const handleClose = () => {\n    setAnchorEl(null);\n  };\n\n  const open = Boolean(anchorEl);\n  const id = open ? 'simple-popover' : undefined;\n\n  return (\n    <>\n        <IconButton aria-describedby={id} style={{color:\"white\"}}  onClick={handleClick}>\n            <HelpIcon/>\n        </IconButton>\n        \n        <Popover\n            id={id}\n            open={open}\n            anchorEl={anchorEl}\n            onClose={handleClose}\n            anchorOrigin={{\n                vertical: 'bottom',\n                horizontal: 'center',\n            }}\n            transformOrigin={{\n                vertical: 'top',\n                horizontal: 'center',\n            }}\n            \n        >\n\n             <Typography variant=\"h6\" > \n                <Box fontWeight='fontWeightBold' display='inline'>Background</Box> \n            </Typography>\n\n            <Typography component=\"div\" >Check Test Results is generated by running the \n                <Box fontWeight='fontWeightBold' display='inline'> check-tests\n                </Box> command in the Phoronix Test Suite.\n            </Typography> \n            <br/>\n            \n            <Typography variant=\"h6\"> \n                <Box fontWeight='fontWeightBold' display='inline'>Navigating The Page</Box> \n            </Typography>\n\n            <Typography component=\"div\">Click on a \n                <Box fontWeight='fontWeightBold' style={{color:theme.palette.primary.main}} display='inline'> Profile, </Box>\n                to see Packages belonging to the test profile. \n                Click on the \n                <Box fontWeight='fontWeightBold' style={{color:theme.palette.primary.main}} display='inline'> Package, </Box>\n                 to see package details. \n                Click on the \n                <Box fontWeight='fontWeightBold' style={{color:theme.palette.primary.main}} display='inline'> Mirror, </Box>\n                to see Mirror details, including Failures.\n                Hint: Any colored text can be clicked.\n            </Typography>\n            <br/>\n\n            <Typography component=\"div\">Successful tests appear in  \n                <Box fontWeight='fontWeightBold' style={{color:theme.palette.primary.main}} display='inline'> blue. </Box>\n                Failed tests appear in  \n                <Box fontWeight='fontWeightBold' style={{color:theme.palette.secondary.main}} display='inline'> red. </Box> \n            </Typography>\n            <br/>\n\n            <Typography component=\"div\" variant=\"h6\"> \n                <Box fontWeight='fontWeightBold' display='inline'>Filters</Box> \n            </Typography>\n            <Typography component=\"div\">Tests can be filtered based on what you want to see.</Typography>\n            <Typography component=\"div\">\n                <Box ml={5} fontWeight='fontWeightBold' display='inline'> All Tests:</Box> Displays all the tests. Default.\n            </Typography>\n            <Typography component=\"div\">\n                <Box ml={5} fontWeight='fontWeightBold' display='inline'> All Fails:</Box> Displays all tests that failed.\n            </Typography>\n            <Typography component=\"div\">\n                <Box ml={5} fontWeight='fontWeightBold' display='inline'> MD5 Fails:</Box> Displays all tests which failed the MD5 checksum.\n            </Typography>\n            <Typography component=\"div\">\n                <Box ml={5} fontWeight='fontWeightBold' display='inline'> SHA256 Fails:</Box> Displays all tests which failed the SHA256 checksum.\n            </Typography>\n            <Typography component=\"div\">\n                <Box ml={5} fontWeight='fontWeightBold' display='inline'> Rediects:</Box> Displays all tests which resulted in a HTTP 301 or 302 status.\n            </Typography>\n            <Typography component=\"div\">\n                <Box ml={5} fontWeight='fontWeightBold' display='inline'> Not Tested:</Box> Displays all tests which were not tested and have no results.\n            </Typography>\n            <Typography component=\"div\">\n                <Box ml={5} fontWeight='fontWeightBold' display='inline'> Timed Out:</Box> Displays all tests which failed to download due to a time out.\n            </Typography>\n            <Typography component=\"div\">\n                <Box ml={5} fontWeight='fontWeightBold' display='inline'> Profile Name:</Box> Searches for the test with the given profile name. Can be used in conjunction with the filters.\n            </Typography>\n               \n            <br/>\n\n            <Typography variant=\"h6\"> \n                <Box fontWeight='fontWeightBold' display='inline'>Explaination of Terms</Box> \n            </Typography>\n            <Typography component=\"div\" >Each Test Profile contains one or more \n                <Box fontWeight='fontWeightBold' display='inline'> packages. </Box>\n                Each Package contains one or more \n                <Box fontWeight='fontWeightBold' display='inline'> mirrors. </Box> \n            </Typography>\n            <br/>\n            \n\n            <Typography component=\"div\"> \n                <Box fontWeight='fontWeightBold' display='inline'> Packages</Box> contain:\n            </Typography>\n            <Typography component=\"div\">\n                <Box ml={5} fontWeight='fontWeightBold' display='inline'> File Name:</Box> Name of the file downloaded from the vendor.\n            </Typography>\n            <Typography component=\"div\">\n                <Box ml={5} fontWeight='fontWeightBold' display='inline'> File Size: </Box> Size of the file downloaded from the vendor.\n            </Typography>\n            <Typography component=\"div\">\n                <Box ml={5} fontWeight='fontWeightBold' display='inline'> SHA256: </Box> SHA256 Key if provided. May be blank. \n            </Typography>\n            <Typography component=\"div\">\n                <Box ml={5} fontWeight='fontWeightBold' display='inline'> MD5: </Box> MD5 Key if provided. May be blank. \n            </Typography>\n            <br/>\n\n            <Typography component=\"div\"> \n                <Box fontWeight='fontWeightBold' display='inline'> Mirrors</Box> contain:\n            </Typography>\n            <Typography component=\"div\">\n                <Box ml={5} fontWeight='fontWeightBold' display='inline'>Status:</Box> The test passed or failed.\n            </Typography>\n            <Typography component=\"div\">\n                <Box ml={5} fontWeight='fontWeightBold' display='inline'>Source: </Box> The test was identical to a previously downloaded test and was reused.\n            </Typography>\n            <Typography component=\"div\">\n                <Box ml={5} fontWeight='fontWeightBold' display='inline'>URL: </Box> The location of the downloaded test. In most cases this will download the test. \n            </Typography>\n            <Typography component=\"div\">\n                <Box ml={5} fontWeight='fontWeightBold' display='inline'>Download Time: </Box> The time taken in millisecs to download the test. \n            </Typography>\n            <Typography component=\"div\">\n                <Box ml={5} fontWeight='fontWeightBold' display='inline'>Redirect To: </Box> URL used when HTTP 302 Redirect is encountered. \n            </Typography>\n        \n            <br/>\n            <Typography component=\"div\"> \n                <Box fontWeight='fontWeightBold' display='inline'> Failures</Box> contain:\n            </Typography>\n            <Typography component=\"div\">\n                <Box ml={5} fontWeight='fontWeightBold' display='inline'>File Size:</Box> The file size downloaded does not match the package filesize.\n            </Typography>\n            <Typography component=\"div\">\n                <Box ml={5} fontWeight='fontWeightBold' display='inline'>MD5: </Box> The MD5 checksum does not match the package MD5 checksum.\n            </Typography>\n            <Typography component=\"div\">\n                <Box ml={5} fontWeight='fontWeightBold' display='inline'>SHA256: </Box> The SHA256 checksum does not match the package MD5 checksum. \n            </Typography>\n            <Typography component=\"div\">\n                <Box ml={5} fontWeight='fontWeightBold' display='inline'>Vendor: </Box> Returned HTTP Status Code when attempting to download file.\n            </Typography>\n            <Typography component=\"div\">\n                <Box ml={5} fontWeight='fontWeightBold' display='inline'>Timed Out: </Box> File failed to download due to a curl time out.\n            </Typography> \n        </Popover> \n    </>\n  );\n}","import TableCell from '@material-ui/core/TableCell';\nimport { withStyles } from '@material-ui/core/styles';\n\n const StyledTableCell = withStyles((theme) => ({\n    head: {\n      //backgroundColor: theme.palette.common.black,\n      color: theme.palette.common.white,\n      padding: \"0px\",\n      backgroundColor: \"#CCD1D1\", //light grey\n\n    },\n    body: {\n      fontSize: 14,\n      padding:\"2px\",\n      marginLeft:\"1.5em\",\n      borderWidth: \"2px\",\n      borderStyle: \"dotted\",\n      borderColor: \"#eff1f1\",\n    }\n  }))(TableCell);\n\n  export default StyledTableCell;\n\n  ","import React from 'react';\nimport Typography from '@material-ui/core/Typography';\nimport TableRow from '@material-ui/core/TableRow';\n\n// lodash functions (part of material UI)\nimport startCase from 'lodash/startCase';\nimport toUpper from 'lodash/toUpper';\nimport StyledTableCell from './StyledTableCell';\n\n\nconst PTSFailures = (props) => {\n    const classes = props.classes;\n\n    // Formats and displays the failures\n    const getFailures = (props) => {\n        return Object.entries(props.failed).map(([key,value], idx) => {\n\n            //converts fileSize to File Size; sha256 to SHA256 for display \n            var keyFormatted = key.replace(/^([A-Z]?[a-z]+)+/, startCase);\n            if (keyFormatted.match(\".*\\\\d.*\")) \n                keyFormatted = toUpper(keyFormatted);\n\n            return (\n                <TableRow key={idx}>\n\n                    { (idx === 0) && \n                        <>\n                            <StyledTableCell \n                                 className={classes.failureRow}\n                                rowSpan={Object.entries(props.failed).length}\n                             />\n                            <StyledTableCell \n                                className={classes.failureRow}\n                                rowSpan={Object.entries(props.failed).length} \n                                style={{verticalAlign: \"text-top\"}}>\n                                    <Typography className={classes.mirrorDataHeading}>Failures</Typography>   \n                            </StyledTableCell> \n                        </>  \n                    }\n\n                    <StyledTableCell className={classes.failureRow} >\n                        <Typography className={classes.failureHeading} style={{marginLeft : \"0px\"}}>{keyFormatted}</Typography>\n                    </StyledTableCell>\n                    <StyledTableCell className={classes.failureRow}>\n                        <Typography className={classes.secondaryHeading}>{value}</Typography>\n                    </StyledTableCell>\n                </TableRow>\n            )\n        })\n    }\n    \n    return (\n        <React.Fragment>\n            {getFailures(props)}             \n        </React.Fragment> \n    )\n}\n\nexport default PTSFailures;","import React from 'react';\nimport { useTheme } from '@material-ui/core/styles';\nimport Typography from '@material-ui/core/Typography';\nimport Link from '@material-ui/core/Link';\nimport Collapse from \"@material-ui/core/Collapse\";\nimport TableRow from '@material-ui/core/TableRow';\n\nimport startCase from 'lodash/startCase';\n\nimport Failures from './PTSFailures';\nimport * as Constants from \"../Constants\";\nimport StyledTableCell from './StyledTableCell';\nimport useStyles from \"./styles\";\n\n\n/**\n * Displays the data that falls under the mirror array. \n * This data relates to how each mirror defined by 'url' peformed during the test.\n * @param props array The Mirror data\n * \n * Mirror -> [{status, duplicate, url, failures {}, download-time}]\n */\nconst PTSMirrors = (props) => {\n    const [openMirror, setOpenMirror] = React.useState(false);\n    const classes= useStyles();\n    const theme = useTheme();\n\n    // open the url. Since most of the urls are downloadable in the JSON, downloads URL.\n    const handleClick = (e) => {\n        window.open(e.target.innerHTML, \"_blank\");\n        e.preventDefault();\n    }\n\n    // Determines the type of data in the cell and returns text, or link\n    const getFormattedCell = (key, value) => {\n        var text = (<Typography className={classes.secondaryHeading}>{value}</Typography>);\n\n        if (key.toLowerCase() === \"duplicate\") {\n            var str = value.slice(value.lastIndexOf(\" \"), value.length);\n            text = (<Typography className={classes.secondaryHeading}>{str}</Typography>);\n        } \n\n        if (key.toLowerCase() === \"url\" || key.toLowerCase() === \"redirectto\") {\n            text = (<Typography>\n                        <Link\n                            color=\"primary\"\n                            href=\"{n}\"\n                            rel=\"noopener\"\n                            onClick={(e) => handleClick(e)}>\n                            {value}\n                        </Link>\n                    </Typography>);\n        }\n\n       return text;\n    }\n    \n    // Mirror collapse component. Will display all the mirror data in collapsible format.\n    const CollapseMirrorComponent = (props) => {\n        var containsFailures = null; \n\n        const result = Object.entries(props.data).map(([key, value], idx) => {\n            if (key.toLowerCase() === Constants.JSON_FAILURES.toLowerCase()) {\n                containsFailures = <Failures key={idx} classes={classes} failed={props.data.failures} />\n                return null;\n             } else \n                return (\n                   <TableRow key={idx} >\n                        <StyledTableCell className={classes.mirrorRow}/>   \n                        <StyledTableCell className={classes.mirrorRow}>\n                            <Typography className={classes.mirrorDataHeading}>{startCase(key)}</Typography>\n                        </StyledTableCell>\n                        <StyledTableCell  colSpan={2} className={classes.mirrorRow} >\n                            {getFormattedCell(key,value)}\n                        </StyledTableCell>  \n                    </TableRow>\n\n             );  \n        });\n        \n        // Pushing failures to the end of the list for aesthetics\n        if (containsFailures !==null) \n            result.push(containsFailures);\n        \n        return result;\n    }\n\n    return (\n        <React.Fragment>\n            <TableRow className={classes.packageNameRow}>\n                <StyledTableCell>\n                    <Typography \n                        onClick={() => setOpenMirror(!openMirror)} \n                        className={classes.mirrorHeading}  \n                        style={{ color:(props.data.status !==Constants.JSON_PASSED) ? theme.palette.secondary.main: theme.palette.primary.main}}\n                    >Mirror {props.idx + 1}</Typography>\n                </StyledTableCell>\n                <StyledTableCell colSpan={3} style={{verticalAlign: \"text-top\"}}>\n                        <Typography \n                            onClick={() => setOpenMirror(!openMirror)} \n                            className={classes.mirrorSecondaryHeading} \n                            style={{ color:(props.data.status !==Constants.JSON_PASSED) ? theme.palette.secondary.main: theme.palette.primary.main}}\n                        >{props.data.url}\n                        </Typography>      \n                </StyledTableCell>               \n            </TableRow>\n\n            <Collapse\n                in={openMirror}\n                timeout='auto'\n                component={() => CollapseMirrorComponent(props)}\n                unmountOnExit>\n            </Collapse>  \n        </React.Fragment>\n    )\n}\n\nexport default PTSMirrors;","import React from 'react';\nimport TableRow from '@material-ui/core/TableRow';\nimport Typography from '@material-ui/core/Typography';\nimport Collapse from \"@material-ui/core/Collapse\";\n\nimport useStyles from \"./styles\";\nimport { withStyles } from '@material-ui/core/styles';\n\nimport * as Constants from \"../Constants\";\nimport PTSMirrors from './PTSMirrors';\nimport StyledTableCell from './StyledTableCell';\n\n/**\n * Diplays the package details of the JSON results\n *  @param props array The Mirror data\n * \n * Package -> [{identifier, pts-filename, pts-filesize, pts-sha256, pts-md5, mirror[]}]\n */\nconst PTSPackages = props => {\n    const packages = props.data;\n    const classes = useStyles();\n    const [open, setOpen] = React.useState(true);  // state of collapse component for displaying mirrors\n\n    const {identifier, \"pts-filename\" : filename, \"pts-filesize\" : filesize, \"pts-sha256\" : sha256, \"pts-md5\" : md5, mirror} = props.data;\n\n    const hasFailedStatus = (props) => {\n        return props.mirror.some((mirror) => mirror.status === Constants.JSON_FAILED)\n    }\n\n    // Displays the Mirror portion for each package within the Profile\n    // Flow: Profile --1:n--> Packages --1:m--> Mirrors \n    const getMirrors = (props) => {\n        let status = \"unknown\";\n\n        if (props.status) {\n            status = (<span>{props.status}</span>);     \n        } else {\n            status = props.map((mir, key) => {\n                return <PTSMirrors  key={key} identifier={identifier} data={mir} idx={key}/>\n            })\n        }\n        \n        return status;   \n    }\n\n    const CollapsePackageComponent = (props) => {\n        return (\n           <React.Fragment >\n                <TableRow className={classes.packageNameRow}>\n                    <StyledTableCell  >\n                        <Typography className={classes.heading}>File Name</Typography>\n                    </StyledTableCell>\n                    <StyledTableCell  colSpan={3} >\n                        <Typography className={classes.secondaryHeading}>{filename}</Typography>\n                    </StyledTableCell>  \n                </TableRow>\n                <TableRow className={classes.packageNameRow}>\n                    <StyledTableCell  >\n                        <Typography className={classes.heading}>File Size</Typography>\n                    </StyledTableCell>\n                    <StyledTableCell  colSpan={3} >\n                        <Typography className={classes.secondaryHeading}>{filesize}</Typography>\n                    </StyledTableCell>                              \n                </TableRow>\n                <TableRow className={classes.packageNameRow}>\n                    <StyledTableCell  >\n                        <Typography className={classes.heading}>SHA256</Typography>\n                    </StyledTableCell>\n                    <StyledTableCell  colSpan={3} >\n                        <Typography className={classes.secondaryHeading}>{sha256}</Typography>\n                    </StyledTableCell>                              \n                </TableRow>\n                <TableRow className={classes.packageNameRow}>\n                    <StyledTableCell  >\n                        <Typography className={classes.heading}>MD5</Typography>\n                    </StyledTableCell>\n                    <StyledTableCell  colSpan={3} >\n                        <Typography className={classes.secondaryHeading}>{md5}</Typography>\n                    </StyledTableCell>                              \n                </TableRow>\n\n                {getMirrors(mirror)}\n            </React.Fragment>    \n        )\n    }\n\n    return ( \n       <>\n            <TableRow>\n                <StyledTableCell colSpan={4} className={classes.packageNameRow}>\n                    <Typography \n                        onClick={() => setOpen(!open)} \n                        color={hasFailedStatus(packages)?'secondary':'primary'} \n                        className={classes.packageName}>\n                    {filename}\n                    </Typography>\n                </StyledTableCell>\n            </TableRow> \n \n            <Collapse \n                in={open} \n                timeout=\"auto\" \n                component={() => CollapsePackageComponent(props)}\n                unmountOnExit >\n            </Collapse> \n        </>\n       \n    )\n}\n\n const packageStyles = withStyles(useStyles)(PTSPackages);\n export { packageStyles };\n\nexport default PTSPackages;\n","import * as Constants from './Constants';\n\n\n/**\n * Determines if the test has failed. \n * A failure of JSON_NOT_TESTED means that no PTS Data is available to display so set the notTested flag.\n * @param {*} packages all the data\n */\nconst hasFailedStatus = (packages) => {\n    return packages.some(pack => \n        pack.mirror.some(mirror => mirror.status === Constants.JSON_FAILED)   \n)};\n\n/**\n * \n * In the case of no download.xml file, the test status will be NOT_TESTED.\n * This does not consitute a failure and also there is not point in getting child components.\n * @param {*} packages all the data\n */\nfunction notTestedPackage(packages) {\n    return packages.some(pack => \n        pack.mirror.some(mirror => \n                (mirror.status === Constants.JSON_NOT_TESTED)                            \n        ) \n    \n)};\n\n/**\n * Determines if the package has timeout during the curl download.\n * @param {*} packages all the data\n */\nfunction timedOutPackage(packages) {\n    return packages.some(pack => \n        pack.mirror.some(mirror => \n             (mirror.downloadTime === Constants.JSON_TIMED_OUT)                            \n        ) \n    \n)};\n\n/**\n * Returns all profiles that have not been tested\n * @param {*} data all the data\n */\nfunction getNotTestedData(data) {\n    if (data && data.length > 0 ) {\n        return data.filter((profile) => \n            profile.packages.some((packs) => \n              packs.mirror.some(mirror => (mirror.status === Constants.JSON_NOT_TESTED)    \n          )))\n    } \n}\n\n/**\n * Returns all profiles that have timed out during the curl download.\n * @param {*} data all the data\n */\nfunction getTimedOutData(data) {\n    if (data && data.length > 0 )\n        return data.filter((profile) => \n            profile.packages.some((packs) => \n               packs.mirror.some(mirror => {\n                   if (mirror['download-time'] === Constants.JSON_TIMED_OUT) {\n                        let mirrorFailure = false;\n                        if (\"failures\" in mirror) {\n                            if ((typeof mirror.failures !== \"string\") && (Constants.JSON_ERROR in mirror.failures)) {\n                                mirrorFailure = true;\n                            }\n                        }\n                        return (mirror.status === Constants.JSON_FAILED && mirrorFailure)\n                    }\n                    return false;\n                })))\n}\n\n/**\n * Returns all profiles that have a redirection HTTP Status code of 301 or 302\n * @param {*} data all the data\n */\nfunction getRedirectData(data) {\n    if (data && data.length > 0 ) {\n      return data.filter((profile) => {\n          return profile.packages.some((packs) => {\n            return packs.mirror.some(mirror => {\n                if (mirror.failures && mirror.failures.httpCode)  \n                    return (mirror.status === Constants.JSON_FAILED && \n                        (mirror.failures.httpCode.toString().includes('301') || mirror.failures.httpCode.toString().includes('302')))\n                 else\n                    return false;     \n            }  \n        )})\n    })\n  } \n}  \n\n/**\n * Returns subset of profiles that matches the searchCriteria defined by the ProfileName text field.\n * @param {*} data all the data\n * @param {*} value the value to search for within @data\n */\nconst getSearchData = (data, value) => {\n    let results = null;\n\n    if (data && data.length > 0) {\n        results = data.filter(profile => {\n            return (profile['profile-name'].includes(value));\n        })\n    }\n    return results;\n}\n\n/**\n * Returns all profiles failed when the search filters (checkboxes) have been applied.\n * @param {*} data the complete set of data\n * @param {*} searchFilters the filters to apply to extract data that failed. ie all failures, all md5 failures... \n */\nfunction getFailedData(data, searchFilters = null) {\n    let testProfile = null;\n\n    if (data && data.length>0 ) {\n      testProfile = data.filter((profile) => {\n          return profile.packages.some((packs) => {\n            return packs.mirror.some(mirror => {\n               if (mirror.status === Constants.JSON_FAILED) {\n                   if (!searchFilters) \n                        return true;\n                    else \n                       return getSpecificFailures( mirror, searchFilters);\n                } else { \n                    return false;\n                }\n            }  \n        )})\n    })\n    return testProfile;\n  } \n}\n\n  /**\n * When the user selects the Failed Checkbox, function returns records that satusfy the failed criteria\n * @param {*} fData The mirror array containing the failed data\n * @param {*} searchFilters The filters to apply for one or more specific failures ie md5\n * @returns boolean true if a match fitting the search criteria has been found\n */\nfunction getSpecificFailures(fData, searchFilters) {\n    let data = fData.failures;  // JSON failure details\n    let failedData = null;      \n\n    // if only the Failed Checkbox has been selected then return all records that failed, otherwise return\n    // only those failed records that match the selected checkboxes. ie md5 or sha256\n    if (searchFilters.length === 1 && searchFilters.includes(Constants.FAILED) ) \n        failedData = (fData.status === Constants.JSON_FAILED);\n    else if (searchFilters.includes(Constants.MD5) && searchFilters.includes(Constants.SHA256))\n        failedData = (data.md5 !== undefined || data.sha256 !== undefined)\n    else if (searchFilters.includes(Constants.MD5) && !searchFilters.includes(Constants.SHA256))\n        failedData = (data.md5 !== undefined )\n    else if (searchFilters.includes(Constants.SHA256) && !searchFilters.includes(Constants.MD5)) \n        failedData= (data.sha256 !== undefined)\n\n    return failedData;\n}\n\nexport {getNotTestedData, getRedirectData, getSearchData, getFailedData, notTestedPackage, hasFailedStatus, timedOutPackage, getTimedOutData}\n\n","import React from 'react';\nimport Typography from '@material-ui/core/Typography';\nimport Collapse from \"@material-ui/core/Collapse\";\nimport TableRow from '@material-ui/core/TableRow';\n\nimport PTSPackages from './PTSPackages';\nimport StyledTableCell from './StyledTableCell';\nimport {notTestedPackage, hasFailedStatus} from \"../processData\";\n\nimport useStyles from \"./styles\";\n\n\nconst PTSProfile = props => {\n    const profile=props.data;\n    const [open, setOpen] = React.useState(false);  // hold state for the profile name collapse component \n    const classes = useStyles();\n\n    // Get the data for each package. A package that is marked as Not Tested has no further\n    // data to display.\n    const getPackages = (packages) => {      \n        if (packages && packages.length>0 ) {\n          return packages.map((pack, pKey) =>  {\n            if ( notTestedPackage(packages) )  // yes packages. \n                return (\n                    <TableRow key={pKey}>\n                        <StyledTableCell key={pKey} colSpan={4}>\n                            <Typography key={pKey} \n                                className={classes.secondaryHeading} \n                                style={{marginLeft:\"1.4em\"}}>\n                                Not Tested. download.xml file did not exist.\n                            </Typography>\n                        </StyledTableCell>\n                    </TableRow>\n                )\n            else\n                return (<PTSPackages key={pKey} data={pack}/> );\n          })      \n        }\n      }\n\n    return (\n        <>\n            <TableRow className={classes.profileNameRow}>\n                <StyledTableCell colSpan={4}>\n                    <Typography \n                        onClick={() => setOpen(!open)} \n                        className={classes.profileName}\n                        color={hasFailedStatus(profile.packages)?'secondary':'primary'} \n                        >\n                        {profile['profile-name']}\n                    </Typography>\n                </StyledTableCell>\n            </TableRow> \n                  \n            <Collapse \n                in={open} \n                timeout=\"auto\" \n                component={() => getPackages(profile.packages)}\n                unmountOnExit >    \n            </Collapse> \n        </>               \n     )\n}\n\nexport default PTSProfile;","import React from 'react';\nimport PTSProfile from './PTSProfile';\n\n\n/**\n * Displays the results based on the filters(checkboxes) selected.\n * @param props the results to be displayed. Note the filters have already been applied.\n */\nfunction PTSResults(props) {\n  const data = props.results;\n  \n  const getResults = (data) => {  \n    if (data && data.length>0 ) {\n      return data.map((profile, tpKey) =>  \n         (<PTSProfile key={tpKey} data={profile}/> )\n      )\n    }\n  }\n\n  return ( \n    <React.Fragment>\n      {getResults(data)}\n    </React.Fragment>\n  );\n}\n\nexport default PTSResults;","import React, {useState} from 'react';\nimport {ThemeProvider} from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\nimport ClearIcon from '@material-ui/icons/Clear';\nimport TextField from '@material-ui/core/TextField';\nimport Container from '@material-ui/core/Container'; //Defines the size of page\nimport Toolbar from '@material-ui/core/Toolbar'; \nimport AppBar from '@material-ui/core/AppBar'; \nimport Divider from '@material-ui/core/Divider';\nimport Typography from '@material-ui/core/Typography';\nimport Grid from '@material-ui/core/Grid';\nimport InputAdornment from '@material-ui/core/InputAdornment';\nimport SearchIcon from '@material-ui/icons/Search';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\n\nimport 'fontsource-roboto';\n\nimport Checkboxes, {useCheckboxes} from './Checkboxes';\nimport PTSHelp from './PTSHelp';\nimport PTSResults from './PTSResults';\nimport * as Constants from '../Constants';\nimport {theme} from './theme';\nimport \"./styles.css\";\nimport useStyles from \"./styles\";\nimport {getNotTestedData, getRedirectData, getSearchData, getFailedData, getTimedOutData} from '../processData';\n\n\nexport function FilterForm(props) {\n    const [searchValue, setSearchValue] = useState(\"\"); // value in the profileName text field\n    const checkboxes = useCheckboxes();                 // filter to determine which results to display\n    const classes = useStyles();                        \n\n    // display the results on the page\n    const handleDisplay = (event) => {\n        event.preventDefault();\n    }\n\n    // clear form of all data and reset checkboxes\n    const clearForm = (event) => {\n        checkboxes.checkboxes.map((box, idx) => checkboxes.setCheckbox(idx, false));\n        setSearchValue(\"\");\n        event.preventDefault();\n    }\n\n    /**\n     * Get the data to display. \n     * The default is all data as per the  JSON file. This method filters and returns the subset of all data\n     * based on the checkboxes selected.\n     * The checkboxes work as an AND when the profile name has been populated.\n     * @param {*} data all the json results\n     * @return results all data that matches the filter AND profile name search criteria.\n     * \n     */\n    const getData = (allData) => {\n        let data = [...allData];\n        let results = data;\n\n        // determine which checkboxes have been selected\n        const filters = checkboxes.checkboxes.filter((checks) => checks.checked === true).map((checkbox) => checkbox.name);\n        \n        // If no checkboxes have been selected, display nothing\n        if (filters && filters.length === 0 ) {\n            results = null;\n        }\n        \n        // If a search value has been defined, get the subset of data that matches the search criteria\n        // and further reduce the data based on the filters selected.\n        if ( searchValue !== \"\" ) {\n            results = getSearchData(data, searchValue);\n            \n            if (filters && filters.length > 0) {\n                data = results;\n            }\n        }\n\n        if (filters.includes(Constants.ALL)) \n            results = data;\n\n        if (filters.includes(Constants.FAILED) || filters.includes(Constants.MD5) || filters.includes(Constants.SHA256)) \n            results = getFailedData(data, filters);\n    \n        if (filters.includes(Constants.REDIRECT))\n            results = getRedirectData(data);\n      \n        if (filters.includes(Constants.NOT_TESTED))\n            results = getNotTestedData(data);\n\n        if (filters.includes(Constants.TIMED_OUT))\n            results = getTimedOutData(data);\n\n        // if all fails display all the data\n        return results;\n    }\n\n    return(\n        <ThemeProvider theme={theme}>\n            <Container maxWidth=\"lg\" className={classes.root}>\n                <React.Fragment>\n                    <form onSubmit={(e) => handleDisplay(e)}>\n                        <div className=\"App\">\n                            <AppBar>\n                                <Toolbar className={classes.toolbar}>\n                                    <Grid justify=\"space-between\"\n                                        container>\n                                        <Grid item>\n                                            <Typography\n                                                variant=\"h2\"\n                                            >Check Tests Results\n                                            </Typography>\n                                        </Grid>\n                                        <Grid item>\n                                            <PTSHelp />\n                                        </Grid>\n                                    </Grid>\n                                </Toolbar>\n                            </AppBar>\n                        </div>\n                        <Grid container >\n                            <Grid container item  \n                                style={{marginTop:\"2em\"}}\n                                justify=\"flex-start\"\n                                alignItems=\"flex-start\"\n                                spacing={1} \n                                direction=\"row\">\n                                <Checkboxes {...checkboxes}  />\n                                    \n                                <Grid item xs={12} sm={3}>\n\n                                    <TextField\n                                        value={searchValue}\n                                        label=\"Profile Name\"\n                                        variant=\"filled\"\n                                        size=\"small\"\n                                        color=\"primary\"\n                                        InputLabelProps={{\n                                            shrink: true,\n                                            }}\n                                        InputProps={{\n                                            startAdornment: <InputAdornment position=\"start\"><SearchIcon /></InputAdornment>,\n                                            disableUnderline: true,\n                                            className: classes.searchField\n\n                                        }}\n                                        onChange={(e) => setSearchValue(e.target.value)}   \n                                    />                                 \n                                </Grid>\n                            </Grid>\n                            <Grid container \n                                justify=\"flex-start\"\n                                alignItems=\"flex-start\"\n                                direction=\"row\"> \n                                <Grid item sm={9} md={8} lg={6} ></Grid>\n                                <Grid item>\n                                    <Button \n                                        className={classes.button}\n                                        startIcon={<ClearIcon />}\n                                        onClick={(e) => clearForm(e)}>\n                                        Clear\n                                    </Button>\n                                </Grid>\n                            </Grid>\n                        </Grid>\n                                    \n                        <Divider style={{marginTop: \"1em\"}}/>\n                    </form>\n\n                    <TableContainer >\n                        <Table className={classes.borders}>\n                            <TableBody className={classes.borders}>\n                                <PTSResults results={getData(props.data)} />\n                            </TableBody>\n                        </Table> \n                    </TableContainer>\n\n                </React.Fragment>\n            </Container>\n        </ThemeProvider>\n    )\n}\n","import './App.css';\nimport axios from 'axios';\nimport React,{useState, useEffect} from 'react';\nimport { FilterForm } from './components/FilterForm';\nimport { LinearProgress } from '@material-ui/core';\nimport useStyles from './components/styles';\n\nfunction App() {\n  //const apiEndPoint = \"check-tests-results.json\";   \n  const apiEndPoint = \"https://raw.githubusercontent.com/tippettj/phoronix-test-suite/master/ob-cache/openbenchmarking.org/check-tests-results.json\";   \n\n\n  const classes = useStyles();\n\n  const [data,setData]=useState([]);\n  const [loading, setLoading] = useState(true);\n\n  // UseEffect runs when component mounts and also when it updates\n  // Since we are changing the state of data, it will run again and again unless we set the second arg to [].\n  // This tells the hook that we are not listening for any changes to data this preventing an infinite loop.\n  useEffect(()=> {\n     const getData = async () => {\n        const result = await axios(apiEndPoint);\n        setData(result.data);\n        setLoading(false);\n    }\n\n    getData();\n\n  },[])\n\n  return (\n    <div >\n      {loading ? <LinearProgress  className={classes.progressBar}/> : <FilterForm data={data}/> } \n    </div>\n  );\n\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n//reportWebVitals();\n"],"sourceRoot":""}